/**
* Copyright (c) Microsoft.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var util = require('util');
var profile = require('../../../util/profile');
var utils = require('../../../util/utils');
var iotHubUtils = require('./iotHubUtils');
var moment = require('moment');
var $ = utils.getLocaleString;

var SKU = ['F1', 'S1', 'S2', 'S3'];
var OPERATIONSMONITORINGCATEGORIES = ['Connections', 'DeviceTelemetry', 'C2DCommands', 'DeviceIdentityOperations', 'FileUploadOperations'];
var OPERATIONSMONITORINGDIAGLEVELS = ['None', 'Error', 'Information'];


exports.init = function (cli) {
  var log = cli.output;
  var iotHub = cli.category('iothub')
    .description($('Commands to manage your Azure Iot Hubs'));

  /**
   * Create a new Iot Hub
   */ 
  iotHub.command('create')
    .description($('Create a new IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--location] <location> [--sku-name] <skuName> [--units] <units> \n' + 
      '\t\t\t [--enable-dm] [enableDMFlag] \n' + 
      '\t\t\t [--d2c-partitions] [d2cPartitions] [--d2c-retention-time-in-days] [d2cRetentionTimeInDays] \n' + 
      '\t\t\t [--c2d-max-delivery-count] [c2dMaxDeliveryCount] [--c2d-ttl] [c2dTtl] \n' + 
      '\t\t\t [--feedback-lock-duration] [feedbackLockDuration] [--feedback-ttl] [feedbackTtl] [--feedback-max-delivery-count] [feedbackMaxDeliveryCount] \n' + 
      '\t\t\t [--enable-fileupload-notifications] [enableFileUploadNotifications] [--fileupload-storage-connectionstring] [fileUploadStorageConnectionString] \n' +
      '\t\t\t [--fileupload-container-name] [fileUploadContainerName] [--fileupload-sas-uri-ttl] [fileUploadSASUriTTL] [--fileupload-notification-ttl] [fileUploadNotificationTTL] \n' +
      '\t\t\t [--fileupload-notification-max-delivery-count] [fileUploadNotificationMaxDeliveryCount] \n' +
      '\t\t\t [--tags] [tags] \n' +  
      '\t\t\t [--subscription] [subscription] [options]')
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the new Iot Hub'))
    .option('-l --location <location>', $('The location (azure region/datacenter) where the IotHub will be provisioned'))
    .option('-k --sku-name <skuName>', util.format($('The name of the sku, one of: [%s]'), SKU.join(', ')))
    .option('-u --units <units>', $('The number of provisioned units'))
    .option('-e --enable-dm [enableDMFlag]', $('The flag which indicates whether Device Management is enabled, one of true, false'))
    .option('-p --d2c-partitions [d2cPartitions]', $('The number of partitions for your device-to-cloud events'))
    .option('-r --d2c-retention-time-in-days [d2cRetentionTimeInDays]', $('The number of days for which the device-to-cloud events will be maintained, between 1 and 7'))
    .option('-d --c2d-max-delivery-count [c2dMaxDeliveryCount]', $('The number of times the IotHub will attempt to deliver a cloud-to-device message to a device, between 1 and 100'))
    .option('-c --c2d-ttl [c2dTtl]', $('The amount of time for which a mesage is available for the device to consume before it is expired by IoT hub, between 1 and 48 hours'))
    .option('-f --feedback-lock-duration [feedbackLockDuration]', $('The lock duration of the feedback messages, between 5 seconds and 5 minutes'))
    .option('-F --feedback-ttl [feedbackTtl]', $('The amount of time a feedback mesage is available for the device to consume before it is expired by IotHub, between 1 and 48 hours'))
    .option('-m --feedback-max-delivery-count [feedbackMaxDeliveryCount]', $('The number of times the IotHub will attempt to deliver a cloud-device feedback message to a device, between 1 and 100'))
    .option('-x --enable-fileupload-notifications [enableFileUploadNotifications]', $('The flag that specifies if the file upload notifications should be turned on, one of true, false'))
    .option('-S --fileupload-storage-connectionstring [fileUploadStorageConnectionString]', $('The storage connection string where the files are to be uploaded'))
    .option('-C --fileupload-container-name [fileUploadContainerName]', $('The storage container name where the files are to be uploaded'))
    .option('-T --fileupload-sas-uri-ttl [fileUploadSASUriTTL]', $('The amount of time for which the SAS Uri generated by IoT Hub is valid before it expires, between 1 and 24 hours'))
    .option('-N --fileUpload-notification-ttl [fileUploadNotificationTTL]', $('The amount of time for which a file upload notification is available for the service to consume before it is expired by IoT Hub, between 1 and 48 hours'))
    .option('-D --fileupload-notification-max-delivery-count [fileUploadNotificationMaxDeliveryCount]', $('The number of times the Iot Hub will attempt to deliver a file notification message, between 1 and 100'))
    .option('-t --tags [tags]', $('The tags to set to the resource group. Can be multiple' +
      'In the format of \'name=value\'. Name is required and value is optional' + 
      'For example, -t \'tag1=value1;tag2\'.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.location) {
        return cli.missingArgument('location');
      }

      if (!options.skuName) {
        return cli.missingArgument('skuName');
      }

      if (!options.units) {
        return cli.missingArgument('units');
      }

      var features = 'None';
      if (options.enableDMFlag) {
        if (options.enableDMFlag == 'true') {
          features = 'DeviceManagement';
        }
      }

      if (!options.d2cPartitions) {
        options.d2cPartitions = iotHubUtils.iotHubDefaults.d2cPartitionCount;
      }

      if (!options.d2cRetentionTimeInDays) {
        options.d2cRetentionTimeInDays = iotHubUtils.iotHubDefaults.d2cRetentionTimeInDays;
      }

      if (!options.c2dMaxDeliveryCount) {
        options.c2dMaxDeliveryCount = iotHubUtils.iotHubDefaults.c2dMaxDeliveryCount;
      }

      if (!options.c2dTtl) {
        options.c2dTtl = iotHubUtils.iotHubDefaults.c2dTtl;
      }

      if (!options.feedbackLockDuration) {
        options.feedbackLockDuration = iotHubUtils.iotHubDefaults.feedbackLockDuration;
      }

      if (!options.feedbackTtl) {
        options.feedbackTtl = iotHubUtils.iotHubDefaults.feedbackTtl;
      }

      if (!options.feedbackMaxDeliveryCount) {
        options.feedbackMaxDeliveryCount = iotHubUtils.iotHubDefaults.feedbackMaxDeliveryCount;
      }

      if (options.enableFileUploadNotifications == 'true') {
        if (!options.fileUploadStorageConnectionString) {
          return cli.missingArgument('fileUploadStorageConnectionString');
        }
      }
  
      if (!options.fileUploadSASUriTTL) {
        options.fileUploadSASUriTTL = iotHubUtils.iotHubDefaults.fileUploadSASUriTTL;
      }

      if (!options.fileUploadNotificationTTL) {
        options.fileUploadNotificationTTL = iotHubUtils.iotHubDefaults.fileUploadNotificationTTL;
      }

      if (!options.fileUploadNotificationMaxDeliveryCount) {
        options.fileUploadNotificationMaxDeliveryCount = iotHubUtils.iotHubDefaults.fileUploadNotificationMaxDeliveryCount;
      }
    
      var defaultStorageEndpoints = null;

      if (options.fileUploadStorageConnectionString) {
		if (!options.fileUploadContainerName) {
          return cli.missingArgument('fileUploadContainerName');
        }

        defaultStorageEndpoints = {
          "$default": {
              connectionString: options.fileUploadStorageConnectionString,
              containerName: options.fileUploadContainerName,
              sasTtlAsIso8601: moment.duration(options.fileUploadSASUriTTL)
          }
        };
      }

      var tagsToSet = null;

      if (options.tags) {
        tagsToSet = iotHubUtils.parseTagsArgument('tags', options.tags);
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      var iotHubCreateParams = {
        name: options.name,
        location: options.location,
        subscriptionid: options.subscription,
        resourcegroup: options.resourceGroup,
        tags: tagsToSet,
        sku: {
          name: options.skuName,
          capacity: Number(options.units)
        },
        properties: {
          enableFileUploadNotifications: options.enableFileUploadNotifications,
          features: features,
          eventHubEndpoints: {
            "events": {
              retentionTimeInDays: Number(options.d2cRetentionTimeInDays),
              partitionCount: Number(options.d2cPartitions)
            },
            "operationsMonitoringEvents": {
              retentionTimeInDays: Number(options.d2cRetentionTimeInDays),
              partitionCount: Number(options.d2cPartitions)
            }
          },
          cloudToDevice: {
            maxDeliveryCount: Number(options.c2dMaxDeliveryCount),
            defaultTtlAsIso8601: moment.duration(options.c2dTtl),
            feedback: {
              maxDeliveryCount: Number(options.feedbackMaxDeliveryCount),
              ttlAsIso8601: moment.duration(options.feedbackTtl),
              lockDurationAsIso8601: moment.duration(options.feedbackLockDuration)
            }
          },
          messagingEndPoints: {
            "fileNotifications": {
              maxDeliveryCount: Number(options.fileUploadNotificationMaxDeliveryCount),
              ttlAsIso8601: moment.duration(options.fileUploadNotificationTTL),
              lockDurationAsIso8601: moment.duration(iotHubUtils.iotHubDefaults.defaultLockDuration)
            }
          }
        }
      };

      if (options.fileUploadStorageConnectionString) {
        iotHubCreateParams.properties.storageEndpoints = defaultStorageEndpoints;
      }

      ////////////////////////////////////////
      // Issue the create.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Creating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubCreateParams, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  /**
   * List Iot Hubs
   */ 
  iotHub.command('list')
    .description($('Get all IotHubs in subcription or resource group'))
    .usage('[--resource-group] [resourceGroup] [--subscription] [subscription] [options]') 
    .option('-g --resource-group [resourceGroup]', $('The name of the resource group'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Listing IotHubs'));
      var iotHubs;

      if (options.resourceGroup) {
        try {
          iotHubs = client.iotHubResource.listByResourceGroup(options.resourceGroup, _);
        } finally {
          progress.end();
        }
      } else {
        try {
          iotHubs = client.iotHubResource.listBySubscription(_);
        } finally {
          progress.end();
        }
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      cli.interaction.formatOutput(iotHubs, function (iotHubs) {
        if (iotHubs.length === 0) {
          log.info($('No iothubs found.'));
          return;
        }
        
        log.table(iotHubs, function (row, iotHub) {
          row.cell($('Name'), iotHub.name);
          row.cell($('Group'), iotHub.resourcegroup);
          row.cell($('Location'), iotHub.location);
          row.cell($('Sku'), iotHub.sku.name);
          row.cell($('Units'), iotHub.sku.capacity);
        });
      });
    });

  /**
   * Get an Iot Hub
   */ 
  iotHub.command('show')
    .description($('Get an IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IotHub'));
      var result;

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      try {
        result = client.iotHubResource.get(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  /**
   * Get the Iot Hub Quota Metrics 
   */ 
  iotHub.command('show-quota-metrics')
    .description($('Get the IotHub Quota Metrics'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IotHub Quota Metrics'));
      var quotaMetrics;

      try {
        quotaMetrics = client.iotHubResource.getQuotaMetrics(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(quotaMetrics, function (quotaMetrics) {
        if (quotaMetrics.length === 0) {
          log.info($('No quota metrics found.'));
          return;
        }
        
        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(quotaMetrics, function (row, metric) {
          row.cell($('Quota Metric Name'), metric.name);
        
		  if (metric.name == 'TotalDeviceCount') {
            row.cell($('MaxValue'), 'Unlimited');
          } else {
            row.cell($('MaxValue'), metric.maxValue);
          }
  
          row.cell($('Current Value'), metric.currentValue);
        });
      });
    });

  /**
   * Get the Iot Hub Registry Statistics
   */ 
  iotHub.command('show-registry-stats')
    .description($('Get the IotHub Registry Statistics'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting IotHub Registry Statistics'));
      var stats;

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      try {
        stats = client.iotHubResource.getStats(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      if (stats) {
        cli.output.json(stats);
      }
  });

  /**
   * Delete an Iot Hub
   */ 
  iotHub.command('delete')
    .description($('Delete an IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub to be deleted'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////
      
      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      var progress = cli.interaction.progress(util.format($('Deleting iothub %s'), options.name));

      var result;
      try {
        result = client.iotHubResource.deleteMethod(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  var iotHubd2cproperties = cli.category('iothub').category('device-to-cloud-properties')
    .description($('Commands to manage the Device to Cloud Properties of an Iot Hub'));

  /**
   * Update Device to Cloud Properties on the IotHub
   */ 
  iotHubd2cproperties.command('set')
    .description($('Set Device to Cloud properties on the IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--d2c-retention-time-in-days] [d2cRetentionTimeInDays] [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the Iot Hub'))
    .option('-r --d2c-retention-time-in-days [d2cRetentionTimeInDays]', $('The number of days for which the device-to-cloud events will be maintained, between 1 and 7'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.d2cRetentionTimeInDays) {
        iotHubDescription.properties.eventHubEndpoints["events"].retentionTimeInDays = Number(options.d2cRetentionTimeInDays);
        iotHubDescription.properties.eventHubEndpoints["operationsMonitoringEvents"].retentionTimeInDays = Number(options.d2cRetentionTimeInDays);
      }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  var iotHubc2dproperties = cli.category('iothub').category('cloud-to-device-properties')
    .description($('Commands to manage the Cloud to Device Properties of an Iot Hub'));

  /**
   * Update Cloud to Device Properties on the IotHub
   */ 
  iotHubc2dproperties.command('set')
    .description($('Set Cloud to Device properties on the IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--c2d-max-delivery-count] [c2dMaxDeliveryCount] [--c2d-ttl] [c2dTtl] \n' +
    '\t\t\t [--feedback-lock-duration] [feedbackLockDuration] [--feedback-ttl] [feedbackTtl] [--feedback-max-delivery-count] [feedbackMaxDeliveryCount] \n' + 
    '\t\t\t [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the Iot Hub'))
    .option('-d --c2d-max-delivery-count [c2dMaxDeliveryCount]', $('The number of times the IotHub will attempt to deliver a cloud-to-device message to a device, between 1 and 100'))
    .option('-c --c2d-ttl [c2dTtl]', $('The amount of time for which a mesage is available for the device to consume before it is expired by IoT hub, between 1 and 48 hours'))
    .option('-f --feedback-lock-duration [feedbackLockDuration]', $('The lock duration of the feedback messages, between 5 seconds and 5 minutes'))
    .option('-F --feedback-ttl [feedbackTtl]', $('The amount of time a feedback mesage is available for the device to consume before it is expired by IotHub, between 1 and 48 hours'))
    .option('-m --feedback-max-delivery-count [feedbackMaxDeliveryCount]', $('The number of times the IotHub will attempt to deliver a cloud-device feedback message to a device, between 1 and 100'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);

      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }
    
      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.c2dMaxDeliveryCount) {
        iotHubDescription.properties.cloudToDevice.maxDeliveryCount = Number(options.c2dMaxDeliveryCount);
      }
    
      if (options.c2dTtl) {
        iotHubDescription.properties.cloudToDevice.defaultTtlAsIso8601 = moment.duration(options.c2dTtl);
      }

      if (options.feedbackLockDuration) {
        iotHubDescription.properties.cloudToDevice.feedback.lockDurationAsIso8601 = moment.duration(options.feedbackLockDuration);
      }

      if (options.feedbackTtl) {
        iotHubDescription.properties.cloudToDevice.feedback.ttlAsIso8601 = moment.duration(options.feedbackTtl);
      }

      if (options.feedbackMaxDeliveryCount) {
        iotHubDescription.properties.cloudToDevice.feedback.maxDeliveryCount = Number(options.feedbackMaxDeliveryCount);
      }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  var iotHubfuproperties = cli.category('iothub').category('file-upload-properties')
    .description($('Commands to manage the File Upload Properties of an Iot Hub'));

  /**
   * Update File upload Properties on the IotHub
   */ 
  iotHubfuproperties.command('set')
    .description($('Set File upload Properties on the IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--enable-fileupload-notifications] [enableFileUploadNotifications] \n' +
      '\t\t\t [--fileupload-storage-connectionstring] [fileUploadStorageConnectionString] [--fileupload-container-name] [fileUploadContainerName] \n' +
      '\t\t\t [--fileupload-sas-uri-ttl] [fileUploadSASUriTTL] [--fileupload-notification-ttl] [fileUploadNotificationTTL] [--fileupload-notification-max-delivery-count] [fileUploadNotificationMaxDeliveryCount] \n' +
      '\t\t\t [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the Iot Hub'))
    .option('-x --enable-fileupload-notifications [enableFileUploadNotifications]', $('The flag that specifies if the file upload notifications should be turned on, one of true, false'))
    .option('-S --fileupload-storage-connectionstring [fileUploadStorageConnectionString]', $('The storage connection string where the files are to be uploaded'))
    .option('-C --fileupload-container-name [fileUploadContainerName]', $('The storage container name where the files are to be uploaded'))
    .option('-T --fileupload-sas-uri-ttl [fileUploadSASUriTTL]', $('The amount of time for which the SAS Uri generated by IoT Hub is valid before it expires, between 1 and 24 hours'))
    .option('-N --fileUpload-notification-ttl [fileUploadNotificationTTL]', $('The amount of time for which a file upload notification is available for the service to consume before it is expired by IoT Hub, between 1 and 48 hours'))
    .option('-D --fileupload-notification-max-delivery-count [fileUploadNotificationMaxDeliveryCount]', $('The number of times the Iot Hub will attempt to deliver a file notification message, between 1 and 100'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.enableFileUploadNotifications) {
        if (options.enableFileUploadNotifications == 'true') {
          iotHubDescription.properties.enableFileUploadNotifications = true;
        } else if (options.enableFileUploadNotifications == 'false') {
          iotHubDescription.properties.enableFileUploadNotifications = false;
        } else {
          return cli.unknownOption(options.enableFileUploadNotifications + ' for enableFileUploadNotifications. Should be true or false.');
        }
      }

      if (options.fileUploadContainerName) {
        if (!options.fileUploadStorageConnectionString) {
          return cli.missingArgument('fileUploadStorageConnectionString');
        }
      }
        
      if (options.fileUploadStorageConnectionString) {
        if (!options.fileUploadContainerName) {
          return cli.missingArgument('fileUploadContainerName');
        }

        iotHubDescription.properties.storageEndpoints["$default"].connectionString = options.fileUploadStorageConnectionString;
        iotHubDescription.properties.storageEndpoints["$default"].containerName = options.fileUploadContainerName;
      }

      if (options.fileUploadSASUriTTL) {
        iotHubDescription.properties.storageEndpoints["$default"].sasTtlAsIso8601 = moment.duration(options.fileUploadSASUriTTL);
      }

      if (options.fileUploadNotificationTTL || options.fileUploadNotificationMaxDeliveryCount) {
        if (iotHubDescription.properties.enableFileUploadNotifications == true) {
          if (iotHubDescription.properties.messagingEndpoints == null) {
            if (!options.fileUploadNotificationTTL) {
              options.fileUploadNotificationTTL = iotHubUtils.iotHubDefaults.fileUploadNotificationTTL;
            }

            if (!options.fileUploadNotificationMaxDeliveryCount) {
              options.fileUploadNotificationMaxDeliveryCount = iotHubUtils.iotHubDefaults.fileUploadNotificationMaxDeliveryCount;
            }
          } else {
            if (!options.fileUploadNotificationTTL) {
              options.fileUploadNotificationTTL = iotHubDescription.properties.messagingEndpoints["fileNotifications"].ttlAsIso8601; 
            }

            if (!options.fileUploadNotificationMaxDeliveryCount) {
              options.fileUploadNotificationMaxDeliveryCount = iotHubDescription.properties.messagingEndpoints["fileNotifications"].maxDeliveryCount ;
            }
		  }

          var messagingEndpoints = {
            "fileNotifications": {
              maxDeliveryCount: Number(options.fileUploadNotificationMaxDeliveryCount),
              ttlAsIso8601: moment.duration(options.fileUploadNotificationTTL),
              lockDurationAsIso8601: moment.duration(iotHubUtils.iotHubDefaults.defaultLockDuration)
            }
          }

          iotHubDescription.properties.messagingEndpoints = messagingEndpoints;
        }
	  }

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } finally {
        progress.end();
      }
	  
	  if (result) {
        cli.output.json(result);
      }
    });

  var iotHubtags = cli.category('iothub').category('tags')
    .description($('Commands to manage the tags of an Iot Hub'));

  /**
   * Update tags on the IotHub
   */ 
  iotHubtags.command('set')
    .description($('Set tags on the IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--tags] [tags] [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the Iot Hub'))
    .option('-t --tags [tags]', $('The tags to set to the resource group. The tags specified here will replace the existing ones and not append to them. Can be multiple' +
      'In the format of \'name=value\'. Name is required and value is optional' + 
      'For example, -t \'tag1=value1;tag2\'.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      if (options.tags)
      {
        iotHubDescription.tags = iotHubUtils.parseTagsArgument('tags', options.tags);
      }
    
      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } 
      finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  var iotHubsku = cli.category('iothub').category('sku')
    .description($('Commands to manage the sku related information of an Iot Hub'));

  /**
   * List the Valid Iot Hub Skus
   */ 
  iotHubsku.command('list')
    .description($('List the Valid Iot Hub Skus'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the valid skus.'));
      var skus;

      try {
        skus = client.iotHubResource.getValidSkus(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(skus, function (skus) {
        if (skus.length === 0) {
          log.info($('No valid skus found.'));
          return;
        }
        
        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(skus, function (row, skuDesc) {
          row.cell($('Sku Name'), skuDesc.sku.name);
          row.cell($('MinUnits'), skuDesc.capacity.minimum);
          row.cell($('MaxUnits'), skuDesc.capacity.maximum);
        });
      });
    });

  /**
   * Get sku info for an IotHub
   */ 
  iotHubsku.command('show')
    .description($('Get sku info for an IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the Iot Hub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      ////////////////////////////////////////
      // Output the sku info.               //
      ////////////////////////////////////////

      log.info($('Sku   : ' + iotHubDescription.sku.name));
      log.info($('Units : ' + iotHubDescription.sku.capacity));

    });

  /**
   * Update sku on the IotHub
   */ 
  iotHubsku.command('set')
    .description($('Set sku on the IotHub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--sku-name] <skuName> [--units] <units> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the Iot Hub'))
    .option('-k --sku-name <skuName>', util.format($('The name of the sku, one of: [%s]'), SKU.join(', ')))
    .option('-u --units <units>', $('The number of provisioned units'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.skuName) {
        return cli.missingArgument('skuName');
      }

      if (!options.units) {
        return cli.missingArgument('units');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      iotHubDescription.sku.name = options.skuName;
      iotHubDescription.sku.capacity = Number(options.units);
    
      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } 
      finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }
    });

  var iotHubehcg = cli.category('iothub').category('ehconsumergroup')
    .description($('Commands to manage the event hub consumer groups of an Iot Hub'));

  /**
   * List the Event Hub consumer groups of an Iot Hub 
   */ 
  iotHubehcg.command('list')
    .description($('List the event hub consumer groups of an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--eh-endpoint-type] <ehEndPointType> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-e --eh-endpoint-type <ehEndPointType>', $('The type of the event hub endpoint. One of events, operationsMonitoringEvents'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.ehEndPointType) {
        return cli.missingArgument('ehEndPointType');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the event hub consumer groups.'));
      var ehConsumerGroups;

      try {
        ehConsumerGroups = client.iotHubResource.listEventHubConsumerGroups(options.resourceGroup, options.name, options.ehEndPointType, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(ehConsumerGroups, function (ehConsumerGroups) {
        if (ehConsumerGroups.length === 0) {
          log.info($('No event hub consumer groups found.'));
          return;
        }
        
        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

        log.table(ehConsumerGroups, function (row, ehConsumerGroup) {
          row.cell($('EH Consumer Group Name'), ehConsumerGroup);
        });
      });
    });

  /**
   * Add an Event Hub consumer groups for an Iot Hub 
   */ 
  iotHubehcg.command('create')
    .description($('Add an Event Hub consumer groups for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--eh-endpoint-type] <ehEndPointType> [--eh-consumer-group] <ehConsumerGroup> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-e --eh-endpoint-type <ehEndPointType>', $('The type of the event hub endpoint. One of events, operationsMonitoringEvents'))
    .option('-c --eh-consumer-group <ehConsumerGroup>', $('The name of the event hub consumer group'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.ehEndPointType) {
        return cli.missingArgument('ehEndPointType');
      }

      if (!options.ehConsumerGroup) {
        return cli.missingArgument('ehConsumerGroup');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Creating an event hub consumer group.'));
      var ehConsumerGroups;

      try {
        ehConsumerGroups = client.iotHubResource.createEventHubConsumerGroup(options.resourceGroup, options.name, options.ehEndPointType, options.ehConsumerGroup, _);
      } finally {
        progress.end();
      }
  });


  /**
   * Delete an Event Hub consumer group for an IoT Hub 
   */ 
  iotHubehcg.command('delete')
    .description($('Delete an Event Hub consumer group for an IoT Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--eh-endpoint-type] <ehEndPointType> [--eh-consumer-group] <ehConsumerGroup> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-e --eh-endpoint-type <ehEndPointType>', $('The type of the event hub endpoint. One of events, operationsMonitoringEvents'))
    .option('-c --eh-consumer-group <ehConsumerGroup>', $('The name of the event hub consumer group'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.ehEndPointType) {
        return cli.missingArgument('ehEndPointType');
      }

      if (!options.ehConsumerGroup) {
        return cli.missingArgument('ehConsumerGroup');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Deleting an event hub consumer group.'));
      var ehConsumerGroups;

      try {
        ehConsumerGroups = client.iotHubResource.deleteEventHubConsumerGroup(options.resourceGroup, options.name, options.ehEndPointType, options.ehConsumerGroup, _);
      } finally {
        progress.end();
      }
  });

  var iotHubkeys = cli.category('iothub').category('key')
    .description($('Commands to manage the keys of an Iot Hub'));

  /**
   * List all keys for an Iot Hub 
   */ 
  iotHubkeys.command('list')
    .description($('List all keys of an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the keys.'));
      var keys;

      try {
        keys = client.iotHubResource.listKeys(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      cli.interaction.formatOutput(keys, function (keys) {
        if (keys.length === 0) {
          log.info($('No keys found.'));
          return;
        }
        
        ////////////////////////////////////////
        // Output the result.                 //
        ////////////////////////////////////////

      log.table(keys, function (row, key) {
        row.cell($('KeyName'), key.keyName);
        row.cell($('Primary Key'), key.primaryKey);
        row.cell($('Secondary Key'), key.secondaryKey);
        row.cell($('Rights'), key.rights);
      });
    });
  });

  /**
   * Show the properties of one key for an Iot Hub 
   */ 
  iotHubkeys.command('show')
    .description($('Show the properties of one key for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--key-name] <keyName> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-k --key-name <keyName>', $('The name of a key in IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.keyName) {
        return cli.missingArgument('key-name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the keys.'));
      var key;

      try {
        key = client.iotHubResource.getKeysForKeyName(options.resourceGroup, options.name, options.keyName, _);
      } finally {
        progress.end();
      }

      if (key == null) {
        log.info($('Key not found.'));
        return;
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      log.info($('KeyName       : ' + key.keyName));
      log.info($('Primary Key   : ' + key.primaryKey));
      log.info($('Secondary Key : ' + key.secondaryKey));
      log.info($('Rights        : ' + key.rights));

    });

  /**
   * Create keys for an Iot Hub 
   */ 
  iotHubkeys.command('create')
    .description($('Create keys for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--key-name] <keyName> [--primary-key] <primaryKey> [--secondary-key] <secondaryKey> [--rights] <rights> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-k --key-name <keyName>', $('The name of a key in IotHub'))
    .option('-p --primary-key <primaryKey>', $('The primary key value for the specified keyName'))
    .option('-e --secondary-key <secondaryKey>', $('The secondary key value for the specified keyName'))
    .option('-r --rights <rights>', $('The rights for the specified keyName. One ore more of the following to be specified as a comma separated value list' +
      'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect' ))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.keyName) {
        return cli.missingArgument('key-name');
      }

      if (!options.primaryKey) {
        return cli.missingArgument('primaryKey');
      }

      if (!options.secondaryKey) {
        return cli.missingArgument('secondaryKey');
      }

      if (!options.rights) {
        return cli.missingArgument('rights');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      var progressGetKeys = cli.interaction.progress($('Getting the keys.'));
      var authorizationPolicies;

      try {
        authorizationPolicies = client.iotHubResource.listKeys(options.resourceGroup, options.name, _);
      } finally {
        progressGetKeys.end();
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      var keyProperties = {
        keyName: options.keyName,
        primaryKey: options.primaryKey,
        secondaryKey: options.secondaryKey,
        rights: options.rights
      };

      authorizationPolicies.push(keyProperties);
      iotHubDescription.properties.authorizationPolicies = authorizationPolicies;
    
      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }

    });

  /**
   * Delete keys for an Iot Hub 
   */ 
  iotHubkeys.command('delete')
    .description($('Delete keys for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--key-name] <keyName> [--primary-key] <primaryKey> [--secondary-key] <secondaryKey> [--rights] <rights> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-k --key-name <keyName>', $('The name of a key in IotHub to delete. The first match for a key with this name will be deleted. The same command can be executed again to delete more keys.'))
    .option('-p --primary-key [primaryKey]', $('The primary key value for the specified keyName'))
    .option('-e --secondary-key [secondaryKey]', $('The secondary key value for the specified keyName'))
    .option('-r --rights [rights]', $('The rights for the specified keyName. One ore more of the following to be specified as a comma separated value list' +
      'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect' ))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.keyName) {
        return cli.missingArgument('key-name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      var progressGetKeys = cli.interaction.progress($('Getting the keys.'));
      var authorizationPolicies;

      try {
        authorizationPolicies = client.iotHubResource.listKeys(options.resourceGroup, options.name, _);
      } finally {
        progressGetKeys.end();
      }

      ////////////////////////////////////////////////////////////
      // Verify that the key is not already present.            //
      ////////////////////////////////////////////////////////////

      var index = -1;

      var arrayLength = authorizationPolicies.length;
      for (var i = 0; i < arrayLength; i++) {
        var primaryKeyFound = true;
        var secondaryKeyFound = true;
        var rightsFound = true;

        if (authorizationPolicies[i].keyName == options.keyName) {
          if (options.primaryKey && options.primaryKey != authorizationPolicies[i].primaryKey) {
            primaryKeyFound = false;
          }

          if (options.secondaryKey && options.secondaryKey != authorizationPolicies[i].secondaryKey) {
            secondaryKeyFound = false;
          }

          if (options.rights && options.rights != authorizationPolicies[i].rights) {
            rightsFound = false;
          }

          if (primaryKeyFound && secondaryKeyFound && rightsFound) {
            index = i;
            break;
          }
        }
      }

      if (index <= -1) {
        throw new Error(util.format($('Key not found: %s'), options.keyName));
      } else {
        authorizationPolicies.splice(index, 1);
      }      
    
      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////

      iotHubDescription.properties.authorizationPolicies = authorizationPolicies;
    
      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      if (result) {
        cli.output.json(result);
      }

    });

  var iotHubOpMon = cli.category('iothub').category('opmon')
    .description($('Commands to manage the operations monitoring related properties of an Iot Hub'));

  /**
   * Show the operations monitoring properties for an Iot Hub 
   */ 
  iotHubOpMon.command('show')
    .description($('Show the operations monitoring properties for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the operations monitoring properties.'));
      var iothubDescription;

      try {
        iothubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      var con = "Connections";
      log.info($('Operations Monitoring properties\n' + JSON.stringify(iothubDescription.properties.operationsMonitoringProperties, null, 4)));
    });


  /**
   * Update the operations monitoring properties for an Iot Hub 
   */ 
  iotHubOpMon.command('set')
    .description($('Update the operations monitoring properties for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--opmon-category] <opMonCategory> [--diagnostic-level] <diagnosticLevel> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-c --opmon-category <opmonCategory>', $('The name of the operations monitoring category. One of Connections, DeviceTelemetry, C2DCommands, DeviceIdentityOperations, FileUploadOperations'))
    .option('-l --diagnostic-level <diagnosticLevel>', $('The diagnostic level. None, Error, Information.'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.opmonCategory) {
        return cli.missingArgument('opmonCategory');
      }

      if (!options.diagnosticLevel) {
        return cli.missingArgument('diagnosticLevel');
      }

      if (options.opmonCategory && OPERATIONSMONITORINGCATEGORIES.indexOf(options.opmonCategory) < 0) {
        throw new Error(util.format($('Invalid value specified for diagnostic category. Please specify one of : %s', OPERATIONSMONITORINGCATEGORIES.join(', '))));
      }

      if (options.diagnosticLevel && OPERATIONSMONITORINGDIAGLEVELS.indexOf(options.diagnosticLevel) < 0) {
        throw new Error(util.format($('Invalid value specified for diagnostic level. Please specify one of : %s', OPERATIONSMONITORINGDIAGLEVELS.join(', '))));
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the current operations monitoring properties.'));
      var iothubDescription;

      ////////////////////////////////////////
      // Load existing iothub description.  //
      ////////////////////////////////////////

      var iotHubDescription = client.iotHubResource.get(options.resourceGroup, options.name, _);
    
      if (!iotHubDescription) {
        throw notFoundError(options.resourceGroup, options.name);
      }

      ////////////////////////////////////////
      // Setting the properties.            //
      ////////////////////////////////////////
      iotHubDescription.properties.operationsMonitoringProperties.events[options.opmonCategory] = options.diagnosticLevel;

      ////////////////////////////////////////
      // Issue the update.                  //
      ////////////////////////////////////////

      var progress = cli.interaction.progress(util.format($('Updating operations monitoring properties of iothub %s'), options.name));
      var result;
      try {
        result = client.iotHubResource.createOrUpdate(options.resourceGroup, options.name, iotHubDescription, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////

      if (result) {
        log.info($('Operations Monitoring properties\n' + JSON.stringify(result.properties.operationsMonitoringProperties, null, 4)));
      }

    });

  var iotHubJob = cli.category('iothub').category('job')
    .description($('Commands to manage the jobs of an Iot Hub'));

  /**
   * List the jobs for an Iot Hub 
   */ 
  iotHubJob.command('list')
    .description($('List the jobs for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the list of jobs.'));
      var jobs;

      try {
        jobs = client.iotHubResource.listJobs(options.resourceGroup, options.name, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      cli.interaction.formatOutput(jobs, function (jobs) {
        if (jobs.length === 0) {
          log.info($('No jobs found.'));
          return;
        }
        
        log.table(jobs, function (row, job) {
          row.cell($('DeviceId'), job.deviceId);
          row.cell($('JobId'), job.jobId);
          row.cell($('JobType'), job.type);
          row.cell($('StartTimeUtc'), job.startTimeUtc);
          row.cell($('EndTimeUtc'), job.endTimeUtc);
          row.cell($('Status'), job.status);
          row.cell($('StatusMessage'), job.statusMessage);
          row.cell($('FailureReason'), job.failureReason);
        });
      });
    });

  /**
   * Show the properties of a job for an Iot Hub 
   */ 
  iotHubJob.command('show')
    .description($('Show the properties of a job for an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> --job-id <jobId> [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-j --job-id <jobId>', $('The Job identifier'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.jobId) {
        return cli.missingArgument('jobId');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Getting the job properties.'));
      var job;

      try {
        job = client.iotHubResource.getJob(options.resourceGroup, options.name, options.jobId, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      if (job) {
        console.log('DeviceId : ' +  job.deviceId);
        console.log('JobId : ' + job.jobId);
        console.log('JobType : ' + job.type);
        console.log('StartTimeUtc : ' + job.startTimeUtc);
        console.log('EndTimeUtc : ' + job.endTimeUtc);
        console.log('Status : ' + job.status);
        console.log('StatusMessage : ' + job.statusMessage);
        console.log('FailureReason : ' + job.failureReason);
      }
    });

  var iotHubDevice = cli.category('iothub').category('device')
    .description($('Commands to manage the devices of an Iot Hub'));

  /**
   * Export the devices of an Iot Hub 
   */ 
  iotHubDevice.command('export')
    .description($('Export the devices of an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--export-blob-container-uri] <exportBlobContainerUri> [--exclude-keys] excludeKeys [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-e --export-blob-container-uri <exportBlobContainerUri>', $('The container Uri to export the devices to'))
    .option('-k --exclude-keys [excludeKeys]', $('The flag indicating if the keys should also be exported or not. One of true, false. Default : true'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.exportBlobContainerUri) {
        return cli.missingArgument('exportBlobContainerUri');
      }

      var excludeKeys = true;
      if (options.excludeKeys == 'false') {
        excludeKeys = false;
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Exporting the devices.'));
      var job;

      var exportJobParams = {
        exportBlobContainerUri: options.exportBlobContainerUri,
        excludeKeys: excludeKeys 
      };
      
      try {
        job = client.iotHubResource.exportDevices(options.resourceGroup, options.name, exportJobParams, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      if (job) {
        console.log('JobId : ' + job.jobId);
        console.log('JobType : ' + job.type);
        console.log('StartTimeUtc : ' + job.startTimeUtc);
        console.log('EndTimeUtc : ' + job.endTimeUtc);
        console.log('Status : ' + job.status);
        console.log('StatusMessage : ' + job.statusMessage);
        console.log('FailureReason : ' + job.failureReason);
      }
    });

  /**
   * Import the devices of an Iot Hub 
   */ 
  iotHubDevice.command('import')
    .description($('Import the devices of an Iot Hub'))
    .usage('[--resource-group] <resourceGroup> [--name] <name> [--input-blob-container-uri] <inputBlobContainerUri> [--output-blob-container-uri] outputBlobContainerUri [--subscription] [subscription] [options]') 
    .option('-g --resource-group <resourceGroup>', $('The name of the resource group'))
    .option('-n --name <name>', $('The name of the IotHub'))
    .option('-i --input-blob-container-uri <inputBlobContainerUri>', $('The container Uri from where devices will be imported'))
    .option('-o --output-blob-container-uri [outputBlobContainerUri]', $('The output container Uri which will be used to write some information related to the import job'))
    .option('-s --subscription [subscription]', $('The subscription identifier'))
    .execute(function (options, _) {

      ////////////////////////////
      // Argument Validations.  //
      ////////////////////////////

      if (!options.resourceGroup) {
        return cli.missingArgument('resourceGroup');
      }

      if (!options.name) {
        return cli.missingArgument('name');
      }

      if (!options.inputBlobContainerUri) {
        return cli.missingArgument('inputBlobContainerUri');
      }

      if (!options.outputBlobContainerUri) {
        return cli.missingArgument('outputBlobContainerUri');
      }

      /////////////////////////
      // Create the client.  //
      /////////////////////////

      var subscription = profile.current.getSubscription(options.subscription);
      var client = utils.getiotHubClient(subscription);
      var progress = cli.interaction.progress($('Importing the devices.'));
      var job;

      var importJobParams = {
        inputBlobContainerUri: options.inputBlobContainerUri,
        outputBlobContainerUri: options.outputBlobContainerUri
      };
      
      try {
        job = client.iotHubResource.importDevices(options.resourceGroup, options.name, importJobParams, _);
      } finally {
        progress.end();
      }

      ////////////////////////////////////////
      // Output the result.                 //
      ////////////////////////////////////////
      if (job) {
        console.log('JobId : ' + job.jobId);
        console.log('JobType : ' + job.type);
        console.log('StartTimeUtc : ' + job.startTimeUtc);
        console.log('EndTimeUtc : ' + job.endTimeUtc);
        console.log('Status : ' + job.status);
        console.log('StatusMessage : ' + job.statusMessage);
        console.log('FailureReason : ' + job.failureReason);
      }
    });

    function notFoundError(resourceGroup, name) {
      var msg;
      if (resourceGroup) {
        msg = util.format($('IotHub not found on resource group %s: %s'), resourceGroup, name);
      } else {
        msg = util.format($('IotHub not found: %s'), name);
      }
	  
	  throw new Error(msg);
    }
};

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from "./models";

declare class ServiceFabricClient {
    /**
     * @class
     * Initializes a new instance of the ServiceFabricClient class.
     * @constructor
     *
     * @param {String} apiVersion 
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - Options for the underlying request object
     * {@link https://github.com/request/request#requestoptions-callback Options doc}
     *
     * @param {bool} [options.noRetryPolicy] - If set to true, turn off default retry policy
     */
    constructor(apiVersion: string, baseUri: string, options: ServiceClientOptions);

    apiVersion: string;

            /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getClusterManifest(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        getClusterManifest(callback: ServiceCallback<string>): void;

        /**
         * @param {object} clusterHealthReport
         * 
         * @param {string} [clusterHealthReport.sourceId]
         * 
         * @param {string} [clusterHealthReport.property]
         * 
         * @param {number} [clusterHealthReport.healthState]
         * 
         * @param {string} [clusterHealthReport.description]
         * 
         * @param {string} [clusterHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [clusterHealthReport.sequenceNumber]
         * 
         * @param {string} [clusterHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendClusterHealthReport(clusterHealthReport: models.ClusterHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendClusterHealthReport(clusterHealthReport: models.ClusterHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.continuationToken]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getNodeList(options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Node[]>): void;
        getNodeList(callback: ServiceCallback<models.Node[]>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.continuationToken]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getNode(nodeName: string, options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Node>): void;
        getNode(nodeName: string, callback: ServiceCallback<models.Node>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getNodeHealth(nodeName: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeHealth>): void;
        getNodeHealth(nodeName: string, callback: ServiceCallback<models.NodeHealth>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedApplicationList(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplication[]>): void;
        getDeployedApplicationList(nodeName: string, callback: ServiceCallback<models.DeployedApplication[]>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedApplication(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplication>): void;
        getDeployedApplication(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedApplication>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {string} [options.deployedServicePackagesHealthStateFilter]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedApplicationHealth(nodeName: string, applicationName: string, options: { eventsHealthStateFilter? : string, deployedServicePackagesHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplicationHealth>): void;
        getDeployedApplicationHealth(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedApplicationHealth>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getNodeLoadInformation(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeLoadInformation>): void;
        getNodeLoadInformation(nodeName: string, callback: ServiceCallback<models.NodeLoadInformation>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedCodePackage(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedCodePackage[]>): void;
        getDeployedCodePackage(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedCodePackage[]>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedReplica(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedReplica[]>): void;
        getDeployedReplica(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedReplica[]>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} partitionName
         * 
         * @param {string} replicaId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedReplicaDetail(nodeName: string, partitionName: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedReplicaDetail>): void;
        getDeployedReplicaDetail(nodeName: string, partitionName: string, replicaId: string, callback: ServiceCallback<models.DeployedReplicaDetail>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedServicePackage(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServicePackage[]>): void;
        getDeployedServicePackage(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedServicePackage[]>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {string} servicePackageName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedServicePackageHealth(nodeName: string, applicationName: string, servicePackageName: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServicePackageHealth>): void;
        getDeployedServicePackageHealth(nodeName: string, applicationName: string, servicePackageName: string, callback: ServiceCallback<models.DeployedServicePackageHealth>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getDeployedServiceType(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServiceType[]>): void;
        getDeployedServiceType(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedServiceType[]>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {object} nodeHealthReport
         * 
         * @param {string} [nodeHealthReport.sourceId]
         * 
         * @param {string} [nodeHealthReport.property]
         * 
         * @param {number} [nodeHealthReport.healthState]
         * 
         * @param {string} [nodeHealthReport.description]
         * 
         * @param {string} [nodeHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [nodeHealthReport.sequenceNumber]
         * 
         * @param {string} [nodeHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendNodeHealthReport(nodeName: string, nodeHealthReport: models.NodeHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendNodeHealthReport(nodeName: string, nodeHealthReport: models.NodeHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {object} deployedApplicationHealthReport
         * 
         * @param {string} [deployedApplicationHealthReport.sourceId]
         * 
         * @param {string} [deployedApplicationHealthReport.property]
         * 
         * @param {number} [deployedApplicationHealthReport.healthState]
         * 
         * @param {string} [deployedApplicationHealthReport.description]
         * 
         * @param {string} [deployedApplicationHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [deployedApplicationHealthReport.sequenceNumber]
         * 
         * @param {string} [deployedApplicationHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendDeployedApplicationHealthReport(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendDeployedApplicationHealthReport(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {string} nodeName
         * 
         * @param {string} applicationName
         * 
         * @param {string} serviceManifestName
         * 
         * @param {object} deployedServicePackageHealthReport
         * 
         * @param {string} [deployedServicePackageHealthReport.sourceId]
         * 
         * @param {string} [deployedServicePackageHealthReport.property]
         * 
         * @param {number} [deployedServicePackageHealthReport.healthState]
         * 
         * @param {string} [deployedServicePackageHealthReport.description]
         * 
         * @param {string}
         * [deployedServicePackageHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [deployedServicePackageHealthReport.sequenceNumber]
         * 
         * @param {string} [deployedServicePackageHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendDeployedServicePackageHealthReport(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServicePackageHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendDeployedServicePackageHealthReport(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServicePackageHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplicationTypeList(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationType[]>): void;
        getApplicationTypeList(callback: ServiceCallback<models.ApplicationType[]>): void;

        /**
         * @param {string} applicationTypeName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplicationType(applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationType[]>): void;
        getApplicationType(applicationTypeName: string, callback: ServiceCallback<models.ApplicationType[]>): void;

        /**
         * @param {string} applicationTypeName
         * 
         * @param {string} applicationTypeVersion
         * 
         * @param {string} serviceManifestName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceManifest>): void;
        getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, callback: ServiceCallback<models.ServiceManifest>): void;

        /**
         * @param {string} applicationTypeName
         * 
         * @param {string} applicationTypeVersion
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceType(applicationTypeName: string, applicationTypeVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceType[]>): void;
        getServiceType(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<models.ServiceType[]>): void;

        /**
         * @param {string} applicationTypeName
         * 
         * @param {string} applicationTypeVersion
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.continuationToken]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationManifest>): void;
        getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<models.ApplicationManifest>): void;

        /**
         * @param {object} registerApplicationType
         * 
         * @param {string} [registerApplicationType.applicationTypeBuildPath]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        registerApplicationType(registerApplicationType: models.RegisterApplicationType, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        registerApplicationType(registerApplicationType: models.RegisterApplicationType, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationTypeName
         * 
         * @param {object} unregisterApplicationType
         * 
         * @param {string} [unregisterApplicationType.applicationTypeVersion]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        unregisterApplicationType(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        unregisterApplicationType(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, callback: ServiceCallback<string>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.continuationToken]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplicationList(options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application[]>): void;
        getApplicationList(callback: ServiceCallback<models.Application[]>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.continuationToken]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplication(applicationName: string, options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;
        getApplication(applicationName: string, callback: ServiceCallback<models.Application>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceList(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Service[]>): void;
        getServiceList(applicationName: string, callback: ServiceCallback<models.Service[]>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getService(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Service>): void;
        getService(applicationName: string, serviceName: string, callback: ServiceCallback<models.Service>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceGroupDescription(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceGroupDescription>): void;
        getServiceGroupDescription(applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceGroupDescription>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceGroupMember(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceGroupMember>): void;
        getServiceGroupMember(applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceGroupMember>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {string} [options.deployedApplicationsHealthStateFilter]
         * 
         * @param {string} [options.servicesHealthStateFilter]
         * 
         * @param {string} [options.continuationToken]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplicationHealth(applicationName: string, options: { eventsHealthStateFilter? : string, deployedApplicationsHealthStateFilter? : string, servicesHealthStateFilter? : string, continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationHealth>): void;
        getApplicationHealth(applicationName: string, callback: ServiceCallback<models.ApplicationHealth>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getApplicationUpgrade(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationUpgrade>): void;
        getApplicationUpgrade(applicationName: string, callback: ServiceCallback<models.ApplicationUpgrade>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} applicationHealthReport
         * 
         * @param {string} [applicationHealthReport.sourceId]
         * 
         * @param {string} [applicationHealthReport.property]
         * 
         * @param {number} [applicationHealthReport.healthState]
         * 
         * @param {string} [applicationHealthReport.description]
         * 
         * @param {string} [applicationHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [applicationHealthReport.sequenceNumber]
         * 
         * @param {string} [applicationHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendApplicationHealthReport(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendApplicationHealthReport(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {object} applicationDescription
         * 
         * @param {string} [applicationDescription.name]
         * 
         * @param {string} [applicationDescription.typeName]
         * 
         * @param {string} [applicationDescription.typeVersion]
         * 
         * @param {array} [applicationDescription.parameterList]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        newApplication(applicationDescription: models.ApplicationDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        newApplication(applicationDescription: models.ApplicationDescription, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} serviceDescription
         * 
         * @param {string} [serviceDescription.applicationName]
         * 
         * @param {string} [serviceDescription.serviceName]
         * 
         * @param {string} [serviceDescription.serviceTypeName]
         * 
         * @param {object} [serviceDescription.partitionDescription]
         * 
         * @param {number} [serviceDescription.partitionDescription.partitionScheme]
         * 
         * @param {number} [serviceDescription.partitionDescription.count]
         * 
         * @param {array} [serviceDescription.partitionDescription.names]
         * 
         * @param {string} [serviceDescription.partitionDescription.lowKey]
         * 
         * @param {string} [serviceDescription.partitionDescription.highKey]
         * 
         * @param {string} [serviceDescription.placementConstraints]
         * 
         * @param {number} [serviceDescription.flags]
         * 
         * @param {string} [serviceDescription.ServiceKind] Polymorhpic Discriminator
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        newService(applicationName: string, serviceDescription: models.ServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        newService(applicationName: string, serviceDescription: models.ServiceDescription, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} serviceDescriptionTemplate
         * 
         * @param {string} [serviceDescriptionTemplate.serviceName]
         * 
         * @param {string} [serviceDescriptionTemplate.serviceTypeName]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        newServiceFromTemplate(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        newServiceFromTemplate(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} serviceGroupDescription
         * 
         * @param {string} [serviceGroupDescription.applicationName]
         * 
         * @param {string} [serviceGroupDescription.serviceName]
         * 
         * @param {string} [serviceGroupDescription.serviceTypeName]
         * 
         * @param {object} [serviceGroupDescription.partitionDescription]
         * 
         * @param {number}
         * [serviceGroupDescription.partitionDescription.partitionScheme]
         * 
         * @param {number} [serviceGroupDescription.partitionDescription.count]
         * 
         * @param {array} [serviceGroupDescription.partitionDescription.names]
         * 
         * @param {string} [serviceGroupDescription.partitionDescription.lowKey]
         * 
         * @param {string} [serviceGroupDescription.partitionDescription.highKey]
         * 
         * @param {string} [serviceGroupDescription.placementConstraints]
         * 
         * @param {number} [serviceGroupDescription.flags]
         * 
         * @param {array} [serviceGroupDescription.serviceGroupMemberDescription]
         * 
         * @param {string} [serviceGroupDescription.ServiceKind] Polymorhpic
         * Discriminator
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        newServiceGroup(applicationName: string, serviceGroupDescription: models.ServiceGroupDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        newServiceGroup(applicationName: string, serviceGroupDescription: models.ServiceGroupDescription, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} serviceDescriptionTemplate
         * 
         * @param {string} [serviceDescriptionTemplate.serviceName]
         * 
         * @param {string} [serviceDescriptionTemplate.serviceTypeName]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        newServiceGroupFromTemplate(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        newServiceGroupFromTemplate(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        removeApplication(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        removeApplication(applicationName: string, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} startApplicationUpgradeDescription
         * 
         * @param {string} [startApplicationUpgradeDescription.name]
         * 
         * @param {string}
         * [startApplicationUpgradeDescription.targetApplicationTypeVersion]
         * 
         * @param {array} [startApplicationUpgradeDescription.parameters]
         * 
         * @param {number} [startApplicationUpgradeDescription.upgradeKind]
         * 
         * @param {number} [startApplicationUpgradeDescription.rollingUpgradeMode]
         * 
         * @param {number}
         * [startApplicationUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds]
         * 
         * @param {boolean} [startApplicationUpgradeDescription.forceRestart]
         * 
         * @param {object} [startApplicationUpgradeDescription.monitoringPolicy]
         * 
         * @param {number}
         * [startApplicationUpgradeDescription.monitoringPolicy.failureAction]
         * 
         * @param {string}
         * [startApplicationUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
         * 
         * @param {string}
         * [startApplicationUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds]
         * 
         * @param {string}
         * [startApplicationUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
         * 
         * @param {string}
         * [startApplicationUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds]
         * 
         * @param {string}
         * [startApplicationUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
         * 
         * @param {object}
         * [startApplicationUpgradeDescription.applicationHealthPolicy]
         * 
         * @param {boolean}
         * [startApplicationUpgradeDescription.applicationHealthPolicy.considerWarningAsError]
         * 
         * @param {number}
         * [startApplicationUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
         * 
         * @param {object}
         * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
         * 
         * @param {number}
         * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
         * 
         * @param {number}
         * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
         * 
         * @param {number}
         * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        startApplicationUpgrade(applicationName: string, startApplicationUpgradeDescription: models.StartApplicationUpgradeDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        startApplicationUpgrade(applicationName: string, startApplicationUpgradeDescription: models.StartApplicationUpgradeDescription, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} updateApplicationUpgradeDescription
         * 
         * @param {string} [updateApplicationUpgradeDescription.name]
         * 
         * @param {number} [updateApplicationUpgradeDescription.upgradeKind]
         * 
         * @param {object} [updateApplicationUpgradeDescription.updateDescription]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.updateDescription.rollingUpgradeMode]
         * 
         * @param {boolean}
         * [updateApplicationUpgradeDescription.updateDescription.forceRestart]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.updateDescription.failureAction]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
         * 
         * @param {string}
         * [updateApplicationUpgradeDescription.updateDescription.healthCheckWaitDurationInMilliseconds]
         * 
         * @param {string}
         * [updateApplicationUpgradeDescription.updateDescription.healthCheckStableDurationInMilliseconds]
         * 
         * @param {string}
         * [updateApplicationUpgradeDescription.updateDescription.healthCheckRetryTimeoutInMilliseconds]
         * 
         * @param {string}
         * [updateApplicationUpgradeDescription.updateDescription.upgradeTimeoutInMilliseconds]
         * 
         * @param {string}
         * [updateApplicationUpgradeDescription.updateDescription.upgradeDomainTimeoutInMilliseconds]
         * 
         * @param {object}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy]
         * 
         * @param {boolean}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy.considerWarningAsError]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
         * 
         * @param {object}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
         * 
         * @param {number}
         * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateApplicationUpgrade(applicationName: string, updateApplicationUpgradeDescription: models.UpdateApplicationUpgradeDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        updateApplicationUpgrade(applicationName: string, updateApplicationUpgradeDescription: models.UpdateApplicationUpgradeDescription, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} resumeApplicationUpgrade
         * 
         * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        resumeApplicationUpgrade(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        resumeApplicationUpgrade(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, callback: ServiceCallback<string>): void;

        /**
         * @param {string} applicationName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        startApplicationUpgradeRollback(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        startApplicationUpgradeRollback(applicationName: string, callback: ServiceCallback<string>): void;

        /**
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        removeService(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        removeService(serviceName: string, callback: ServiceCallback<string>): void;

        /**
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceDescription(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceDescription>): void;
        getServiceDescription(serviceName: string, callback: ServiceCallback<models.ServiceDescription>): void;

        /**
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getServiceHealth(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceHealth>): void;
        getServiceHealth(serviceName: string, callback: ServiceCallback<models.ServiceHealth>): void;

        /**
         * @param {string} serviceName
         * 
         * @param {object} serviceHealthReport
         * 
         * @param {string} [serviceHealthReport.sourceId]
         * 
         * @param {string} [serviceHealthReport.property]
         * 
         * @param {number} [serviceHealthReport.healthState]
         * 
         * @param {string} [serviceHealthReport.description]
         * 
         * @param {string} [serviceHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [serviceHealthReport.sequenceNumber]
         * 
         * @param {string} [serviceHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendServiceHealth(serviceName: string, serviceHealthReport: models.ServiceHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendServiceHealth(serviceName: string, serviceHealthReport: models.ServiceHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {string} serviceName
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getPartitionList(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Partition[]>): void;
        getPartitionList(serviceName: string, callback: ServiceCallback<models.Partition[]>): void;

        /**
         * @param {string} serviceName
         * 
         * @param {string} partitionId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getPartition(serviceName: string, partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Partition>): void;
        getPartition(serviceName: string, partitionId: string, callback: ServiceCallback<models.Partition>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getReplicaList(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replica[]>): void;
        getReplicaList(partitionId: string, callback: ServiceCallback<models.Replica[]>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {string} replicaId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getReplica(partitionId: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replica>): void;
        getReplica(partitionId: string, replicaId: string, callback: ServiceCallback<models.Replica>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {string} [options.replicasHealthStateFilter]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getPartitionHealth(partitionId: string, options: { eventsHealthStateFilter? : string, replicasHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionHealth>): void;
        getPartitionHealth(partitionId: string, callback: ServiceCallback<models.PartitionHealth>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {object} partitionHealthReport
         * 
         * @param {string} [partitionHealthReport.sourceId]
         * 
         * @param {string} [partitionHealthReport.property]
         * 
         * @param {number} [partitionHealthReport.healthState]
         * 
         * @param {string} [partitionHealthReport.description]
         * 
         * @param {string} [partitionHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [partitionHealthReport.sequenceNumber]
         * 
         * @param {string} [partitionHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendPartitionHealthReport(partitionId: string, partitionHealthReport: models.PartitionHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendPartitionHealthReport(partitionId: string, partitionHealthReport: models.PartitionHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {string} replicaId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getReplicaHealth(partitionId: string, replicaId: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaHealth>): void;
        getReplicaHealth(partitionId: string, replicaId: string, callback: ServiceCallback<models.ReplicaHealth>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {string} replicaId
         * 
         * @param {object} replicaHealthReport
         * 
         * @param {string} [replicaHealthReport.sourceId]
         * 
         * @param {string} [replicaHealthReport.property]
         * 
         * @param {number} [replicaHealthReport.healthState]
         * 
         * @param {string} [replicaHealthReport.description]
         * 
         * @param {string} [replicaHealthReport.timeToLiveInMilliSeconds]
         * 
         * @param {string} [replicaHealthReport.sequenceNumber]
         * 
         * @param {string} [replicaHealthReport.removeWhenExpired]
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sendReplicaHealth(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        sendReplicaHealth(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, callback: ServiceCallback<string>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getPartitionLoadInformation(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionLoadInformation>): void;
        getPartitionLoadInformation(partitionId: string, callback: ServiceCallback<models.PartitionLoadInformation>): void;

        /**
         * @param {string} partitionId
         * 
         * @param {string} replicaId
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getReplicaLoadInformation(partitionId: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaLoadInformation>): void;
        getReplicaLoadInformation(partitionId: string, replicaId: string, callback: ServiceCallback<models.ReplicaLoadInformation>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getClusterLoadInformation(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterLoadInformation>): void;
        getClusterLoadInformation(callback: ServiceCallback<models.ClusterLoadInformation>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.eventsHealthStateFilter]
         * 
         * @param {string} [options.nodesHealthStateFilter]
         * 
         * @param {string} [options.applicationsHealthStateFilter]
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getClusterHealth(options: { eventsHealthStateFilter? : string, nodesHealthStateFilter? : string, applicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterHealth>): void;
        getClusterHealth(callback: ServiceCallback<models.ClusterHealth>): void;

        /**
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getUpgradeProgress(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
        getUpgradeProgress(callback: ServiceCallback<string>): void;
}

export = ServiceFabricClient;

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationHealth class.
 * @constructor
 * @member {object} [healthEvents]
 * 
 * @member {string} [healthEvents.sourceId]
 * 
 * @member {string} [healthEvents.property]
 * 
 * @member {number} [healthEvents.healthState]
 * 
 * @member {string} [healthEvents.timeToLiveInMilliSeconds]
 * 
 * @member {string} [healthEvents.description]
 * 
 * @member {string} [healthEvents.sequenceNumber]
 * 
 * @member {boolean} [healthEvents.removeWhenExpired]
 * 
 * @member {string} [healthEvents.sourceUtcTimestamp]
 * 
 * @member {string} [healthEvents.lastModifiedUtcTimestamp]
 * 
 * @member {boolean} [healthEvents.isExpired]
 * 
 * @member {string} [healthEvents.lastOkTransitionAt]
 * 
 * @member {string} [healthEvents.lastWarningTransitionAt]
 * 
 * @member {string} [healthEvents.lastErrorTransitionAt]
 * 
 * @member {number} [aggregatedHealthState]
 * 
 * @member {string} [unhealthyEvaluations]
 * 
 * @member {string} [name]
 * 
 * @member {array} [serviceHealthStates]
 * 
 * @member {array} [deployedApplicationHealthStates]
 * 
 */
function ApplicationHealth(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.healthEvents) {
      this.healthEvents = new models['HealthEvent'](parameters.healthEvents);
    }
    if (parameters.aggregatedHealthState !== undefined) {
      this.aggregatedHealthState = parameters.aggregatedHealthState;
    }
    if (parameters.unhealthyEvaluations !== undefined) {
      this.unhealthyEvaluations = parameters.unhealthyEvaluations;
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.serviceHealthStates) {
      var tempParametersserviceHealthStates = [];
      parameters.serviceHealthStates.forEach(function(element) {
        if (element) {
          element = new models['ApplicationHealthServiceHealthStatesItem'](element);
        }
        tempParametersserviceHealthStates.push(element);
      });
      this.serviceHealthStates = tempParametersserviceHealthStates;
    }
    if (parameters.deployedApplicationHealthStates) {
      var tempParametersdeployedApplicationHealthStates = [];
      parameters.deployedApplicationHealthStates.forEach(function(element1) {
        if (element1) {
          element1 = new models['ApplicationHealthDeployedApplicationHealthStatesItem'](element1);
        }
        tempParametersdeployedApplicationHealthStates.push(element1);
      });
      this.deployedApplicationHealthStates = tempParametersdeployedApplicationHealthStates;
    }
  }    
}


/**
 * Validate the payload against the ApplicationHealth schema
 *
 * @param {JSON} payload
 *
 */
ApplicationHealth.prototype.serialize = function () {
  var payload = {};
  if (this['healthEvents']) {
    payload['HealthEvents'] = this['healthEvents'].serialize();
  }

  if (this['aggregatedHealthState'] !== null && this['aggregatedHealthState'] !== undefined) {
    if (typeof this['aggregatedHealthState'] !== 'number') {
      throw new Error('this[\'aggregatedHealthState\'] must be of type number.');
    }
    payload['AggregatedHealthState'] = this['aggregatedHealthState'];
  }

  if (this['unhealthyEvaluations'] !== null && this['unhealthyEvaluations'] !== undefined) {
    if (typeof this['unhealthyEvaluations'].valueOf() !== 'string') {
      throw new Error('this[\'unhealthyEvaluations\'] must be of type string.');
    }
    payload['UnhealthyEvaluations'] = this['unhealthyEvaluations'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (util.isArray(this['serviceHealthStates'])) {
    payload['ServiceHealthStates'] = [];
    for (var i = 0; i < this['serviceHealthStates'].length; i++) {
      if (this['serviceHealthStates'][i]) {
        payload['ServiceHealthStates'][i] = this['serviceHealthStates'][i].serialize();
      }
    }
  }

  if (util.isArray(this['deployedApplicationHealthStates'])) {
    payload['DeployedApplicationHealthStates'] = [];
    for (var i1 = 0; i1 < this['deployedApplicationHealthStates'].length; i1++) {
      if (this['deployedApplicationHealthStates'][i1]) {
        payload['DeployedApplicationHealthStates'][i1] = this['deployedApplicationHealthStates'][i1].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to ApplicationHealth schema
 *
 * @param {JSON} instance
 *
 */
ApplicationHealth.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['HealthEvents']) {
      this['healthEvents'] = new models['HealthEvent']().deserialize(instance['HealthEvents']);
    }

    if (instance['AggregatedHealthState'] !== undefined) {
      this['aggregatedHealthState'] = instance['AggregatedHealthState'];
    }

    if (instance['UnhealthyEvaluations'] !== undefined) {
      this['unhealthyEvaluations'] = instance['UnhealthyEvaluations'];
    }

    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['ServiceHealthStates']) {
      var tempInstanceServiceHealthStates = [];
      instance['ServiceHealthStates'].forEach(function(element2) {
        if (element2) {
          element2 = new models['ApplicationHealthServiceHealthStatesItem']().deserialize(element2);
        }
        tempInstanceServiceHealthStates.push(element2);
      });
      this['serviceHealthStates'] = tempInstanceServiceHealthStates;
    }

    if (instance['DeployedApplicationHealthStates']) {
      var tempInstanceDeployedApplicationHealthStates = [];
      instance['DeployedApplicationHealthStates'].forEach(function(element3) {
        if (element3) {
          element3 = new models['ApplicationHealthDeployedApplicationHealthStatesItem']().deserialize(element3);
        }
        tempInstanceDeployedApplicationHealthStates.push(element3);
      });
      this['deployedApplicationHealthStates'] = tempInstanceDeployedApplicationHealthStates;
    }
  }

  return this;
};

module.exports = ApplicationHealth;

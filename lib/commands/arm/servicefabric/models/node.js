/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the Node class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {string} [ipAddressOrFQDN]
 * 
 * @member {string} [type]
 * 
 * @member {string} [codeVersion]
 * 
 * @member {string} [configVersion]
 * 
 * @member {number} [nodeStatus]
 * 
 * @member {string} [nodeUpTimeInSeconds]
 * 
 * @member {number} [healthState]
 * 
 * @member {boolean} [isSeedNode]
 * 
 * @member {string} [upgradeDomain]
 * 
 * @member {string} [faultDomain]
 * 
 * @member {object} [id]
 * 
 * @member {string} [id.id]
 * 
 * @member {string} [instanceId]
 * 
 * @member {object} [nodeDeactivationInfo]
 * 
 * @member {number} [nodeDeactivationInfo.nodeDeactivationIntent]
 * 
 * @member {number} [nodeDeactivationInfo.nodeDeactivationStatus]
 * 
 */
function Node(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.ipAddressOrFQDN !== undefined) {
      this.ipAddressOrFQDN = parameters.ipAddressOrFQDN;
    }
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.codeVersion !== undefined) {
      this.codeVersion = parameters.codeVersion;
    }
    if (parameters.configVersion !== undefined) {
      this.configVersion = parameters.configVersion;
    }
    if (parameters.nodeStatus !== undefined) {
      this.nodeStatus = parameters.nodeStatus;
    }
    if (parameters.nodeUpTimeInSeconds !== undefined) {
      this.nodeUpTimeInSeconds = parameters.nodeUpTimeInSeconds;
    }
    if (parameters.healthState !== undefined) {
      this.healthState = parameters.healthState;
    }
    if (parameters.isSeedNode !== undefined) {
      this.isSeedNode = parameters.isSeedNode;
    }
    if (parameters.upgradeDomain !== undefined) {
      this.upgradeDomain = parameters.upgradeDomain;
    }
    if (parameters.faultDomain !== undefined) {
      this.faultDomain = parameters.faultDomain;
    }
    if (parameters.id) {
      this.id = new models['NodeId'](parameters.id);
    }
    if (parameters.instanceId !== undefined) {
      this.instanceId = parameters.instanceId;
    }
    if (parameters.nodeDeactivationInfo) {
      this.nodeDeactivationInfo = new models['NodeNodeDeactivationInfo'](parameters.nodeDeactivationInfo);
    }
  }    
}


/**
 * Validate the payload against the Node schema
 *
 * @param {JSON} payload
 *
 */
Node.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (this['ipAddressOrFQDN'] !== null && this['ipAddressOrFQDN'] !== undefined) {
    if (typeof this['ipAddressOrFQDN'].valueOf() !== 'string') {
      throw new Error('this[\'ipAddressOrFQDN\'] must be of type string.');
    }
    payload['IpAddressOrFQDN'] = this['ipAddressOrFQDN'];
  }

  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['Type'] = this['type'];
  }

  if (this['codeVersion'] !== null && this['codeVersion'] !== undefined) {
    if (typeof this['codeVersion'].valueOf() !== 'string') {
      throw new Error('this[\'codeVersion\'] must be of type string.');
    }
    payload['CodeVersion'] = this['codeVersion'];
  }

  if (this['configVersion'] !== null && this['configVersion'] !== undefined) {
    if (typeof this['configVersion'].valueOf() !== 'string') {
      throw new Error('this[\'configVersion\'] must be of type string.');
    }
    payload['ConfigVersion'] = this['configVersion'];
  }

  if (this['nodeStatus'] !== null && this['nodeStatus'] !== undefined) {
    if (typeof this['nodeStatus'] !== 'number') {
      throw new Error('this[\'nodeStatus\'] must be of type number.');
    }
    payload['NodeStatus'] = this['nodeStatus'];
  }

  if (this['nodeUpTimeInSeconds'] !== null && this['nodeUpTimeInSeconds'] !== undefined) {
    if (typeof this['nodeUpTimeInSeconds'].valueOf() !== 'string') {
      throw new Error('this[\'nodeUpTimeInSeconds\'] must be of type string.');
    }
    payload['NodeUpTimeInSeconds'] = this['nodeUpTimeInSeconds'];
  }

  if (this['healthState'] !== null && this['healthState'] !== undefined) {
    if (typeof this['healthState'] !== 'number') {
      throw new Error('this[\'healthState\'] must be of type number.');
    }
    payload['HealthState'] = this['healthState'];
  }

  if (this['isSeedNode'] !== null && this['isSeedNode'] !== undefined) {
    if (typeof this['isSeedNode'] !== 'boolean') {
      throw new Error('this[\'isSeedNode\'] must be of type boolean.');
    }
    payload['IsSeedNode'] = this['isSeedNode'];
  }

  if (this['upgradeDomain'] !== null && this['upgradeDomain'] !== undefined) {
    if (typeof this['upgradeDomain'].valueOf() !== 'string') {
      throw new Error('this[\'upgradeDomain\'] must be of type string.');
    }
    payload['UpgradeDomain'] = this['upgradeDomain'];
  }

  if (this['faultDomain'] !== null && this['faultDomain'] !== undefined) {
    if (typeof this['faultDomain'].valueOf() !== 'string') {
      throw new Error('this[\'faultDomain\'] must be of type string.');
    }
    payload['FaultDomain'] = this['faultDomain'];
  }

  if (this['id']) {
    payload['Id'] = this['id'].serialize();
  }

  if (this['instanceId'] !== null && this['instanceId'] !== undefined) {
    if (typeof this['instanceId'].valueOf() !== 'string') {
      throw new Error('this[\'instanceId\'] must be of type string.');
    }
    payload['InstanceId'] = this['instanceId'];
  }

  if (this['nodeDeactivationInfo']) {
    payload['NodeDeactivationInfo'] = this['nodeDeactivationInfo'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to Node schema
 *
 * @param {JSON} instance
 *
 */
Node.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['IpAddressOrFQDN'] !== undefined) {
      this['ipAddressOrFQDN'] = instance['IpAddressOrFQDN'];
    }

    if (instance['Type'] !== undefined) {
      this['type'] = instance['Type'];
    }

    if (instance['CodeVersion'] !== undefined) {
      this['codeVersion'] = instance['CodeVersion'];
    }

    if (instance['ConfigVersion'] !== undefined) {
      this['configVersion'] = instance['ConfigVersion'];
    }

    if (instance['NodeStatus'] !== undefined) {
      this['nodeStatus'] = instance['NodeStatus'];
    }

    if (instance['NodeUpTimeInSeconds'] !== undefined) {
      this['nodeUpTimeInSeconds'] = instance['NodeUpTimeInSeconds'];
    }

    if (instance['HealthState'] !== undefined) {
      this['healthState'] = instance['HealthState'];
    }

    if (instance['IsSeedNode'] !== undefined) {
      this['isSeedNode'] = instance['IsSeedNode'];
    }

    if (instance['UpgradeDomain'] !== undefined) {
      this['upgradeDomain'] = instance['UpgradeDomain'];
    }

    if (instance['FaultDomain'] !== undefined) {
      this['faultDomain'] = instance['FaultDomain'];
    }

    if (instance['Id']) {
      this['id'] = new models['NodeId']().deserialize(instance['Id']);
    }

    if (instance['InstanceId'] !== undefined) {
      this['instanceId'] = instance['InstanceId'];
    }

    if (instance['NodeDeactivationInfo']) {
      this['nodeDeactivationInfo'] = new models['NodeNodeDeactivationInfo']().deserialize(instance['NodeDeactivationInfo']);
    }
  }

  return this;
};

module.exports = Node;

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ResolvedServicePartition class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {object} [partitionInformation]
 * 
 * @member {number} [partitionInformation.servicePartitionKind]
 * 
 * @member {string} [partitionInformation.id]
 * 
 * @member {array} [endpoints]
 * 
 * @member {string} [version]
 * 
 */
function ResolvedServicePartition(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.partitionInformation) {
      this.partitionInformation = new models['ResolvedServicePartitionPartitionInformation'](parameters.partitionInformation);
    }
    if (parameters.endpoints) {
      var tempParametersendpoints = [];
      parameters.endpoints.forEach(function(element) {
        if (element) {
          element = new models['ResolvedServicePartitionEndpointsItem'](element);
        }
        tempParametersendpoints.push(element);
      });
      this.endpoints = tempParametersendpoints;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the ResolvedServicePartition schema
 *
 * @param {JSON} payload
 *
 */
ResolvedServicePartition.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (this['partitionInformation']) {
    payload['PartitionInformation'] = this['partitionInformation'].serialize();
  }

  if (util.isArray(this['endpoints'])) {
    payload['Endpoints'] = [];
    for (var i = 0; i < this['endpoints'].length; i++) {
      if (this['endpoints'][i]) {
        payload['Endpoints'][i] = this['endpoints'][i].serialize();
      }
    }
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['Version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to ResolvedServicePartition schema
 *
 * @param {JSON} instance
 *
 */
ResolvedServicePartition.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['PartitionInformation']) {
      this['partitionInformation'] = new models['ResolvedServicePartitionPartitionInformation']().deserialize(instance['PartitionInformation']);
    }

    if (instance['Endpoints']) {
      var tempInstanceEndpoints = [];
      instance['Endpoints'].forEach(function(element1) {
        if (element1) {
          element1 = new models['ResolvedServicePartitionEndpointsItem']().deserialize(element1);
        }
        tempInstanceEndpoints.push(element1);
      });
      this['endpoints'] = tempInstanceEndpoints;
    }

    if (instance['Version'] !== undefined) {
      this['version'] = instance['Version'];
    }
  }

  return this;
};

module.exports = ResolvedServicePartition;

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Application class.
 * @constructor
 * @member {string} [id]
 * 
 * @member {string} [name]
 * 
 * @member {string} [typeName]
 * 
 * @member {string} [typeVersion]
 * 
 * @member {number} [status]
 * 
 * @member {array} [parameters]
 * 
 * @member {number} [healthState]
 * 
 */
function Application(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.typeName !== undefined) {
      this.typeName = parameters.typeName;
    }
    if (parameters.typeVersion !== undefined) {
      this.typeVersion = parameters.typeVersion;
    }
    if (parameters.status !== undefined) {
      this.status = parameters.status;
    }
    if (parameters.parameters) {
      var tempParametersparameters = [];
      parameters.parameters.forEach(function(element) {
        if (element) {
          element = new models['ApplicationParametersItem'](element);
        }
        tempParametersparameters.push(element);
      });
      this.parameters = tempParametersparameters;
    }
    if (parameters.healthState !== undefined) {
      this.healthState = parameters.healthState;
    }
  }    
}


/**
 * Validate the payload against the Application schema
 *
 * @param {JSON} payload
 *
 */
Application.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['Id'] = this['id'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (this['typeName'] !== null && this['typeName'] !== undefined) {
    if (typeof this['typeName'].valueOf() !== 'string') {
      throw new Error('this[\'typeName\'] must be of type string.');
    }
    payload['TypeName'] = this['typeName'];
  }

  if (this['typeVersion'] !== null && this['typeVersion'] !== undefined) {
    if (typeof this['typeVersion'].valueOf() !== 'string') {
      throw new Error('this[\'typeVersion\'] must be of type string.');
    }
    payload['TypeVersion'] = this['typeVersion'];
  }

  if (this['status'] !== null && this['status'] !== undefined) {
    if (typeof this['status'] !== 'number') {
      throw new Error('this[\'status\'] must be of type number.');
    }
    payload['Status'] = this['status'];
  }

  if (util.isArray(this['parameters'])) {
    payload['Parameters'] = [];
    for (var i = 0; i < this['parameters'].length; i++) {
      if (this['parameters'][i]) {
        payload['Parameters'][i] = this['parameters'][i].serialize();
      }
    }
  }

  if (this['healthState'] !== null && this['healthState'] !== undefined) {
    if (typeof this['healthState'] !== 'number') {
      throw new Error('this[\'healthState\'] must be of type number.');
    }
    payload['HealthState'] = this['healthState'];
  }

  return payload;
};

/**
 * Deserialize the instance to Application schema
 *
 * @param {JSON} instance
 *
 */
Application.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['Id'] !== undefined) {
      this['id'] = instance['Id'];
    }

    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['TypeName'] !== undefined) {
      this['typeName'] = instance['TypeName'];
    }

    if (instance['TypeVersion'] !== undefined) {
      this['typeVersion'] = instance['TypeVersion'];
    }

    if (instance['Status'] !== undefined) {
      this['status'] = instance['Status'];
    }

    if (instance['Parameters']) {
      var tempInstanceParameters = [];
      instance['Parameters'].forEach(function(element1) {
        if (element1) {
          element1 = new models['ApplicationParametersItem']().deserialize(element1);
        }
        tempInstanceParameters.push(element1);
      });
      this['parameters'] = tempInstanceParameters;
    }

    if (instance['HealthState'] !== undefined) {
      this['healthState'] = instance['HealthState'];
    }
  }

  return this;
};

module.exports = Application;

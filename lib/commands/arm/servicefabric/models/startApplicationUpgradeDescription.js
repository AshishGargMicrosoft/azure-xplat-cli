/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the StartApplicationUpgradeDescription class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {string} [targetApplicationTypeVersion]
 * 
 * @member {array} [parameters]
 * 
 * @member {number} [upgradeKind]
 * 
 * @member {number} [rollingUpgradeMode]
 * 
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds]
 * 
 * @member {boolean} [forceRestart]
 * 
 * @member {object} [monitoringPolicy]
 * 
 * @member {number} [monitoringPolicy.failureAction]
 * 
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * 
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * 
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * 
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds]
 * 
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
 * 
 * @member {object} [applicationHealthPolicy]
 * 
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError]
 * 
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 * 
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * 
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 * 
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * 
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * 
 */
function StartApplicationUpgradeDescription(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.targetApplicationTypeVersion !== undefined) {
      this.targetApplicationTypeVersion = parameters.targetApplicationTypeVersion;
    }
    if (parameters.parameters) {
      var tempParametersparameters = [];
      parameters.parameters.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersparameters.push(element);
      });
      this.parameters = tempParametersparameters;
    }
    if (parameters.upgradeKind !== undefined) {
      this.upgradeKind = parameters.upgradeKind;
    }
    if (parameters.rollingUpgradeMode !== undefined) {
      this.rollingUpgradeMode = parameters.rollingUpgradeMode;
    }
    if (parameters.upgradeReplicaSetCheckTimeoutInSeconds !== undefined) {
      this.upgradeReplicaSetCheckTimeoutInSeconds = parameters.upgradeReplicaSetCheckTimeoutInSeconds;
    }
    if (parameters.forceRestart !== undefined) {
      this.forceRestart = parameters.forceRestart;
    }
    if (parameters.monitoringPolicy) {
      this.monitoringPolicy = new models['MonitoringPolicy'](parameters.monitoringPolicy);
    }
    if (parameters.applicationHealthPolicy) {
      this.applicationHealthPolicy = new models['ApplicationHealthPolicy'](parameters.applicationHealthPolicy);
    }
  }    
}


/**
 * Validate the payload against the StartApplicationUpgradeDescription schema
 *
 * @param {JSON} payload
 *
 */
StartApplicationUpgradeDescription.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (this['targetApplicationTypeVersion'] !== null && this['targetApplicationTypeVersion'] !== undefined) {
    if (typeof this['targetApplicationTypeVersion'].valueOf() !== 'string') {
      throw new Error('this[\'targetApplicationTypeVersion\'] must be of type string.');
    }
    payload['TargetApplicationTypeVersion'] = this['targetApplicationTypeVersion'];
  }

  if (util.isArray(this['parameters'])) {
    payload['Parameters'] = [];
    for (var i = 0; i < this['parameters'].length; i++) {
      if (this['parameters'][i] !== null && this['parameters'][i] !== undefined) {
        if (typeof this['parameters'][i].valueOf() !== 'string') {
          throw new Error('this[\'parameters\'][i] must be of type string.');
        }
        payload['Parameters'][i] = this['parameters'][i];
      }
    }
  }

  if (this['upgradeKind'] !== null && this['upgradeKind'] !== undefined) {
    if (typeof this['upgradeKind'] !== 'number') {
      throw new Error('this[\'upgradeKind\'] must be of type number.');
    }
    payload['UpgradeKind'] = this['upgradeKind'];
  }

  if (this['rollingUpgradeMode'] !== null && this['rollingUpgradeMode'] !== undefined) {
    if (typeof this['rollingUpgradeMode'] !== 'number') {
      throw new Error('this[\'rollingUpgradeMode\'] must be of type number.');
    }
    payload['RollingUpgradeMode'] = this['rollingUpgradeMode'];
  }

  if (this['upgradeReplicaSetCheckTimeoutInSeconds'] !== null && this['upgradeReplicaSetCheckTimeoutInSeconds'] !== undefined) {
    if (typeof this['upgradeReplicaSetCheckTimeoutInSeconds'] !== 'number') {
      throw new Error('this[\'upgradeReplicaSetCheckTimeoutInSeconds\'] must be of type number.');
    }
    payload['UpgradeReplicaSetCheckTimeoutInSeconds'] = this['upgradeReplicaSetCheckTimeoutInSeconds'];
  }

  if (this['forceRestart'] !== null && this['forceRestart'] !== undefined) {
    if (typeof this['forceRestart'] !== 'boolean') {
      throw new Error('this[\'forceRestart\'] must be of type boolean.');
    }
    payload['ForceRestart'] = this['forceRestart'];
  }

  if (this['monitoringPolicy']) {
    payload['MonitoringPolicy'] = this['monitoringPolicy'].serialize();
  }

  if (this['applicationHealthPolicy']) {
    payload['ApplicationHealthPolicy'] = this['applicationHealthPolicy'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to StartApplicationUpgradeDescription schema
 *
 * @param {JSON} instance
 *
 */
StartApplicationUpgradeDescription.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['TargetApplicationTypeVersion'] !== undefined) {
      this['targetApplicationTypeVersion'] = instance['TargetApplicationTypeVersion'];
    }

    if (instance['Parameters']) {
      var tempInstanceParameters = [];
      instance['Parameters'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstanceParameters.push(element1);
      });
      this['parameters'] = tempInstanceParameters;
    }

    if (instance['UpgradeKind'] !== undefined) {
      this['upgradeKind'] = instance['UpgradeKind'];
    }

    if (instance['RollingUpgradeMode'] !== undefined) {
      this['rollingUpgradeMode'] = instance['RollingUpgradeMode'];
    }

    if (instance['UpgradeReplicaSetCheckTimeoutInSeconds'] !== undefined) {
      this['upgradeReplicaSetCheckTimeoutInSeconds'] = instance['UpgradeReplicaSetCheckTimeoutInSeconds'];
    }

    if (instance['ForceRestart'] !== undefined) {
      this['forceRestart'] = instance['ForceRestart'];
    }

    if (instance['MonitoringPolicy']) {
      this['monitoringPolicy'] = new models['MonitoringPolicy']().deserialize(instance['MonitoringPolicy']);
    }

    if (instance['ApplicationHealthPolicy']) {
      this['applicationHealthPolicy'] = new models['ApplicationHealthPolicy']().deserialize(instance['ApplicationHealthPolicy']);
    }
  }

  return this;
};

module.exports = StartApplicationUpgradeDescription;

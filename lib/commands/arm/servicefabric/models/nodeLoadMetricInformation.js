/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the NodeLoadMetricInformation class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {string} [nodeCapacity]
 * 
 * @member {string} [nodeLoad]
 * 
 * @member {string} [nodeRemainingCapacity]
 * 
 * @member {boolean} [isCapacityViolation]
 * 
 * @member {string} [nodeBufferedCapacity]
 * 
 * @member {string} [nodeRemainingBufferedCapacity]
 * 
 */
function NodeLoadMetricInformation(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.nodeCapacity !== undefined) {
      this.nodeCapacity = parameters.nodeCapacity;
    }
    if (parameters.nodeLoad !== undefined) {
      this.nodeLoad = parameters.nodeLoad;
    }
    if (parameters.nodeRemainingCapacity !== undefined) {
      this.nodeRemainingCapacity = parameters.nodeRemainingCapacity;
    }
    if (parameters.isCapacityViolation !== undefined) {
      this.isCapacityViolation = parameters.isCapacityViolation;
    }
    if (parameters.nodeBufferedCapacity !== undefined) {
      this.nodeBufferedCapacity = parameters.nodeBufferedCapacity;
    }
    if (parameters.nodeRemainingBufferedCapacity !== undefined) {
      this.nodeRemainingBufferedCapacity = parameters.nodeRemainingBufferedCapacity;
    }
  }    
}


/**
 * Validate the payload against the NodeLoadMetricInformation schema
 *
 * @param {JSON} payload
 *
 */
NodeLoadMetricInformation.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (this['nodeCapacity'] !== null && this['nodeCapacity'] !== undefined) {
    if (typeof this['nodeCapacity'].valueOf() !== 'string') {
      throw new Error('this[\'nodeCapacity\'] must be of type string.');
    }
    payload['NodeCapacity'] = this['nodeCapacity'];
  }

  if (this['nodeLoad'] !== null && this['nodeLoad'] !== undefined) {
    if (typeof this['nodeLoad'].valueOf() !== 'string') {
      throw new Error('this[\'nodeLoad\'] must be of type string.');
    }
    payload['NodeLoad'] = this['nodeLoad'];
  }

  if (this['nodeRemainingCapacity'] !== null && this['nodeRemainingCapacity'] !== undefined) {
    if (typeof this['nodeRemainingCapacity'].valueOf() !== 'string') {
      throw new Error('this[\'nodeRemainingCapacity\'] must be of type string.');
    }
    payload['NodeRemainingCapacity'] = this['nodeRemainingCapacity'];
  }

  if (this['isCapacityViolation'] !== null && this['isCapacityViolation'] !== undefined) {
    if (typeof this['isCapacityViolation'] !== 'boolean') {
      throw new Error('this[\'isCapacityViolation\'] must be of type boolean.');
    }
    payload['IsCapacityViolation'] = this['isCapacityViolation'];
  }

  if (this['nodeBufferedCapacity'] !== null && this['nodeBufferedCapacity'] !== undefined) {
    if (typeof this['nodeBufferedCapacity'].valueOf() !== 'string') {
      throw new Error('this[\'nodeBufferedCapacity\'] must be of type string.');
    }
    payload['NodeBufferedCapacity'] = this['nodeBufferedCapacity'];
  }

  if (this['nodeRemainingBufferedCapacity'] !== null && this['nodeRemainingBufferedCapacity'] !== undefined) {
    if (typeof this['nodeRemainingBufferedCapacity'].valueOf() !== 'string') {
      throw new Error('this[\'nodeRemainingBufferedCapacity\'] must be of type string.');
    }
    payload['NodeRemainingBufferedCapacity'] = this['nodeRemainingBufferedCapacity'];
  }

  return payload;
};

/**
 * Deserialize the instance to NodeLoadMetricInformation schema
 *
 * @param {JSON} instance
 *
 */
NodeLoadMetricInformation.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['NodeCapacity'] !== undefined) {
      this['nodeCapacity'] = instance['NodeCapacity'];
    }

    if (instance['NodeLoad'] !== undefined) {
      this['nodeLoad'] = instance['NodeLoad'];
    }

    if (instance['NodeRemainingCapacity'] !== undefined) {
      this['nodeRemainingCapacity'] = instance['NodeRemainingCapacity'];
    }

    if (instance['IsCapacityViolation'] !== undefined) {
      this['isCapacityViolation'] = instance['IsCapacityViolation'];
    }

    if (instance['NodeBufferedCapacity'] !== undefined) {
      this['nodeBufferedCapacity'] = instance['NodeBufferedCapacity'];
    }

    if (instance['NodeRemainingBufferedCapacity'] !== undefined) {
      this['nodeRemainingBufferedCapacity'] = instance['NodeRemainingBufferedCapacity'];
    }
  }

  return this;
};

module.exports = NodeLoadMetricInformation;

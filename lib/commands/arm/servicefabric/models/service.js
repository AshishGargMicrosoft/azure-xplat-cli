/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the Service class.
 * @constructor
 * @member {string} [id]
 * 
 * @member {number} [serviceKind]
 * 
 * @member {string} [name]
 * 
 * @member {string} [typeName]
 * 
 * @member {string} [manifestVersion]
 * 
 * @member {boolean} [hasPersistedState]
 * 
 * @member {number} [healthState]
 * 
 * @member {number} [serviceStatus]
 * 
 * @member {boolean} [isServiceGroup]
 * 
 */
function Service(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.serviceKind !== undefined) {
      this.serviceKind = parameters.serviceKind;
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.typeName !== undefined) {
      this.typeName = parameters.typeName;
    }
    if (parameters.manifestVersion !== undefined) {
      this.manifestVersion = parameters.manifestVersion;
    }
    if (parameters.hasPersistedState !== undefined) {
      this.hasPersistedState = parameters.hasPersistedState;
    }
    if (parameters.healthState !== undefined) {
      this.healthState = parameters.healthState;
    }
    if (parameters.serviceStatus !== undefined) {
      this.serviceStatus = parameters.serviceStatus;
    }
    if (parameters.isServiceGroup !== undefined) {
      this.isServiceGroup = parameters.isServiceGroup;
    }
  }    
}


/**
 * Validate the payload against the Service schema
 *
 * @param {JSON} payload
 *
 */
Service.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['Id'] = this['id'];
  }

  if (this['serviceKind'] !== null && this['serviceKind'] !== undefined) {
    if (typeof this['serviceKind'] !== 'number') {
      throw new Error('this[\'serviceKind\'] must be of type number.');
    }
    payload['ServiceKind'] = this['serviceKind'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['Name'] = this['name'];
  }

  if (this['typeName'] !== null && this['typeName'] !== undefined) {
    if (typeof this['typeName'].valueOf() !== 'string') {
      throw new Error('this[\'typeName\'] must be of type string.');
    }
    payload['TypeName'] = this['typeName'];
  }

  if (this['manifestVersion'] !== null && this['manifestVersion'] !== undefined) {
    if (typeof this['manifestVersion'].valueOf() !== 'string') {
      throw new Error('this[\'manifestVersion\'] must be of type string.');
    }
    payload['ManifestVersion'] = this['manifestVersion'];
  }

  if (this['hasPersistedState'] !== null && this['hasPersistedState'] !== undefined) {
    if (typeof this['hasPersistedState'] !== 'boolean') {
      throw new Error('this[\'hasPersistedState\'] must be of type boolean.');
    }
    payload['HasPersistedState'] = this['hasPersistedState'];
  }

  if (this['healthState'] !== null && this['healthState'] !== undefined) {
    if (typeof this['healthState'] !== 'number') {
      throw new Error('this[\'healthState\'] must be of type number.');
    }
    payload['HealthState'] = this['healthState'];
  }

  if (this['serviceStatus'] !== null && this['serviceStatus'] !== undefined) {
    if (typeof this['serviceStatus'] !== 'number') {
      throw new Error('this[\'serviceStatus\'] must be of type number.');
    }
    payload['ServiceStatus'] = this['serviceStatus'];
  }

  if (this['isServiceGroup'] !== null && this['isServiceGroup'] !== undefined) {
    if (typeof this['isServiceGroup'] !== 'boolean') {
      throw new Error('this[\'isServiceGroup\'] must be of type boolean.');
    }
    payload['IsServiceGroup'] = this['isServiceGroup'];
  }

  return payload;
};

/**
 * Deserialize the instance to Service schema
 *
 * @param {JSON} instance
 *
 */
Service.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['Id'] !== undefined) {
      this['id'] = instance['Id'];
    }

    if (instance['ServiceKind'] !== undefined) {
      this['serviceKind'] = instance['ServiceKind'];
    }

    if (instance['Name'] !== undefined) {
      this['name'] = instance['Name'];
    }

    if (instance['TypeName'] !== undefined) {
      this['typeName'] = instance['TypeName'];
    }

    if (instance['ManifestVersion'] !== undefined) {
      this['manifestVersion'] = instance['ManifestVersion'];
    }

    if (instance['HasPersistedState'] !== undefined) {
      this['hasPersistedState'] = instance['HasPersistedState'];
    }

    if (instance['HealthState'] !== undefined) {
      this['healthState'] = instance['HealthState'];
    }

    if (instance['ServiceStatus'] !== undefined) {
      this['serviceStatus'] = instance['ServiceStatus'];
    }

    if (instance['IsServiceGroup'] !== undefined) {
      this['isServiceGroup'] = instance['IsServiceGroup'];
    }
  }

  return this;
};

module.exports = Service;

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the Partition class.
 * @constructor
 * @member {number} [serviceKind]
 * 
 * @member {object} [partitionInformation]
 * 
 * @member {number} [partitionInformation.servicePartitionKind]
 * 
 * @member {string} [partitionInformation.id]
 * 
 * @member {number} [targetReplicaSetSize]
 * 
 * @member {number} [minReplicaSetSize]
 * 
 * @member {number} [healthState]
 * 
 * @member {number} [partitionStatus]
 * 
 * @member {object} [currentConfigurationEpoch]
 * 
 * @member {string} [currentConfigurationEpoch.configurationVersion]
 * 
 * @member {string} [currentConfigurationEpoch.dataLossVersion]
 * 
 */
function Partition(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.serviceKind !== undefined) {
      this.serviceKind = parameters.serviceKind;
    }
    if (parameters.partitionInformation) {
      this.partitionInformation = new models['PartitionPartitionInformation'](parameters.partitionInformation);
    }
    if (parameters.targetReplicaSetSize !== undefined) {
      this.targetReplicaSetSize = parameters.targetReplicaSetSize;
    }
    if (parameters.minReplicaSetSize !== undefined) {
      this.minReplicaSetSize = parameters.minReplicaSetSize;
    }
    if (parameters.healthState !== undefined) {
      this.healthState = parameters.healthState;
    }
    if (parameters.partitionStatus !== undefined) {
      this.partitionStatus = parameters.partitionStatus;
    }
    if (parameters.currentConfigurationEpoch) {
      this.currentConfigurationEpoch = new models['PartitionCurrentConfigurationEpoch'](parameters.currentConfigurationEpoch);
    }
  }    
}


/**
 * Validate the payload against the Partition schema
 *
 * @param {JSON} payload
 *
 */
Partition.prototype.serialize = function () {
  var payload = {};
  if (this['serviceKind'] !== null && this['serviceKind'] !== undefined) {
    if (typeof this['serviceKind'] !== 'number') {
      throw new Error('this[\'serviceKind\'] must be of type number.');
    }
    payload['ServiceKind'] = this['serviceKind'];
  }

  if (this['partitionInformation']) {
    payload['PartitionInformation'] = this['partitionInformation'].serialize();
  }

  if (this['targetReplicaSetSize'] !== null && this['targetReplicaSetSize'] !== undefined) {
    if (typeof this['targetReplicaSetSize'] !== 'number') {
      throw new Error('this[\'targetReplicaSetSize\'] must be of type number.');
    }
    payload['TargetReplicaSetSize'] = this['targetReplicaSetSize'];
  }

  if (this['minReplicaSetSize'] !== null && this['minReplicaSetSize'] !== undefined) {
    if (typeof this['minReplicaSetSize'] !== 'number') {
      throw new Error('this[\'minReplicaSetSize\'] must be of type number.');
    }
    payload['MinReplicaSetSize'] = this['minReplicaSetSize'];
  }

  if (this['healthState'] !== null && this['healthState'] !== undefined) {
    if (typeof this['healthState'] !== 'number') {
      throw new Error('this[\'healthState\'] must be of type number.');
    }
    payload['HealthState'] = this['healthState'];
  }

  if (this['partitionStatus'] !== null && this['partitionStatus'] !== undefined) {
    if (typeof this['partitionStatus'] !== 'number') {
      throw new Error('this[\'partitionStatus\'] must be of type number.');
    }
    payload['PartitionStatus'] = this['partitionStatus'];
  }

  if (this['currentConfigurationEpoch']) {
    payload['CurrentConfigurationEpoch'] = this['currentConfigurationEpoch'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to Partition schema
 *
 * @param {JSON} instance
 *
 */
Partition.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['ServiceKind'] !== undefined) {
      this['serviceKind'] = instance['ServiceKind'];
    }

    if (instance['PartitionInformation']) {
      this['partitionInformation'] = new models['PartitionPartitionInformation']().deserialize(instance['PartitionInformation']);
    }

    if (instance['TargetReplicaSetSize'] !== undefined) {
      this['targetReplicaSetSize'] = instance['TargetReplicaSetSize'];
    }

    if (instance['MinReplicaSetSize'] !== undefined) {
      this['minReplicaSetSize'] = instance['MinReplicaSetSize'];
    }

    if (instance['HealthState'] !== undefined) {
      this['healthState'] = instance['HealthState'];
    }

    if (instance['PartitionStatus'] !== undefined) {
      this['partitionStatus'] = instance['PartitionStatus'];
    }

    if (instance['CurrentConfigurationEpoch']) {
      this['currentConfigurationEpoch'] = new models['PartitionCurrentConfigurationEpoch']().deserialize(instance['CurrentConfigurationEpoch']);
    }
  }

  return this;
};

module.exports = Partition;

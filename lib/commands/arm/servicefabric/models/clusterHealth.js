/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ClusterHealth class.
 * @constructor
 * @member {object} [healthEvents]
 * 
 * @member {string} [healthEvents.sourceId]
 * 
 * @member {string} [healthEvents.property]
 * 
 * @member {number} [healthEvents.healthState]
 * 
 * @member {string} [healthEvents.timeToLiveInMilliSeconds]
 * 
 * @member {string} [healthEvents.description]
 * 
 * @member {string} [healthEvents.sequenceNumber]
 * 
 * @member {boolean} [healthEvents.removeWhenExpired]
 * 
 * @member {string} [healthEvents.sourceUtcTimestamp]
 * 
 * @member {string} [healthEvents.lastModifiedUtcTimestamp]
 * 
 * @member {boolean} [healthEvents.isExpired]
 * 
 * @member {string} [healthEvents.lastOkTransitionAt]
 * 
 * @member {string} [healthEvents.lastWarningTransitionAt]
 * 
 * @member {string} [healthEvents.lastErrorTransitionAt]
 * 
 * @member {number} [aggregatedHealthState]
 * 
 * @member {array} [unhealthyEvaluations]
 * 
 * @member {array} [nodeHealthStates]
 * 
 * @member {array} [applicationHealthState]
 * 
 */
function ClusterHealth(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.healthEvents) {
      this.healthEvents = new models['HealthEvent'](parameters.healthEvents);
    }
    if (parameters.aggregatedHealthState !== undefined) {
      this.aggregatedHealthState = parameters.aggregatedHealthState;
    }
    if (parameters.unhealthyEvaluations) {
      var tempParametersunhealthyEvaluations = [];
      parameters.unhealthyEvaluations.forEach(function(element) {
        if (element) {
          element = new models['UnhealthyEvaluation'](element);
        }
        tempParametersunhealthyEvaluations.push(element);
      });
      this.unhealthyEvaluations = tempParametersunhealthyEvaluations;
    }
    if (parameters.nodeHealthStates) {
      var tempParametersnodeHealthStates = [];
      parameters.nodeHealthStates.forEach(function(element1) {
        if (element1) {
          element1 = new models['ClusterHealthNodeHealthStatesItem'](element1);
        }
        tempParametersnodeHealthStates.push(element1);
      });
      this.nodeHealthStates = tempParametersnodeHealthStates;
    }
    if (parameters.applicationHealthState) {
      var tempParametersapplicationHealthState = [];
      parameters.applicationHealthState.forEach(function(element2) {
        if (element2) {
          element2 = new models['ClusterHealthApplicationHealthStateItem'](element2);
        }
        tempParametersapplicationHealthState.push(element2);
      });
      this.applicationHealthState = tempParametersapplicationHealthState;
    }
  }    
}


/**
 * Validate the payload against the ClusterHealth schema
 *
 * @param {JSON} payload
 *
 */
ClusterHealth.prototype.serialize = function () {
  var payload = {};
  if (this['healthEvents']) {
    payload['HealthEvents'] = this['healthEvents'].serialize();
  }

  if (this['aggregatedHealthState'] !== null && this['aggregatedHealthState'] !== undefined) {
    if (typeof this['aggregatedHealthState'] !== 'number') {
      throw new Error('this[\'aggregatedHealthState\'] must be of type number.');
    }
    payload['AggregatedHealthState'] = this['aggregatedHealthState'];
  }

  if (util.isArray(this['unhealthyEvaluations'])) {
    payload['UnhealthyEvaluations'] = [];
    for (var i = 0; i < this['unhealthyEvaluations'].length; i++) {
      if (this['unhealthyEvaluations'][i]) {
        payload['UnhealthyEvaluations'][i] = this['unhealthyEvaluations'][i].serialize();
      }
    }
  }

  if (util.isArray(this['nodeHealthStates'])) {
    payload['NodeHealthStates'] = [];
    for (var i1 = 0; i1 < this['nodeHealthStates'].length; i1++) {
      if (this['nodeHealthStates'][i1]) {
        payload['NodeHealthStates'][i1] = this['nodeHealthStates'][i1].serialize();
      }
    }
  }

  if (util.isArray(this['applicationHealthState'])) {
    payload['ApplicationHealthState'] = [];
    for (var i2 = 0; i2 < this['applicationHealthState'].length; i2++) {
      if (this['applicationHealthState'][i2]) {
        payload['ApplicationHealthState'][i2] = this['applicationHealthState'][i2].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to ClusterHealth schema
 *
 * @param {JSON} instance
 *
 */
ClusterHealth.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['HealthEvents']) {
      this['healthEvents'] = new models['HealthEvent']().deserialize(instance['HealthEvents']);
    }

    if (instance['AggregatedHealthState'] !== undefined) {
      this['aggregatedHealthState'] = instance['AggregatedHealthState'];
    }

    if (instance['UnhealthyEvaluations']) {
      var tempInstanceUnhealthyEvaluations = [];
      instance['UnhealthyEvaluations'].forEach(function(element3) {
        if (element3) {
          element3 = new models['UnhealthyEvaluation']().deserialize(element3);
        }
        tempInstanceUnhealthyEvaluations.push(element3);
      });
      this['unhealthyEvaluations'] = tempInstanceUnhealthyEvaluations;
    }

    if (instance['NodeHealthStates']) {
      var tempInstanceNodeHealthStates = [];
      instance['NodeHealthStates'].forEach(function(element4) {
        if (element4) {
          element4 = new models['ClusterHealthNodeHealthStatesItem']().deserialize(element4);
        }
        tempInstanceNodeHealthStates.push(element4);
      });
      this['nodeHealthStates'] = tempInstanceNodeHealthStates;
    }

    if (instance['ApplicationHealthState']) {
      var tempInstanceApplicationHealthState = [];
      instance['ApplicationHealthState'].forEach(function(element5) {
        if (element5) {
          element5 = new models['ClusterHealthApplicationHealthStateItem']().deserialize(element5);
        }
        tempInstanceApplicationHealthState.push(element5);
      });
      this['applicationHealthState'] = tempInstanceApplicationHealthState;
    }
  }

  return this;
};

module.exports = ClusterHealth;

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ServiceGroupDescriptionPartitionDescription class.
 * @constructor
 * @member {number} [partitionScheme]
 * 
 * @member {number} [count]
 * 
 * @member {array} [names]
 * 
 * @member {string} [lowKey]
 * 
 * @member {string} [highKey]
 * 
 */
function ServiceGroupDescriptionPartitionDescription(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.partitionScheme !== undefined) {
      this.partitionScheme = parameters.partitionScheme;
    }
    if (parameters.count !== undefined) {
      this.count = parameters.count;
    }
    if (parameters.names) {
      var tempParametersnames = [];
      parameters.names.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersnames.push(element);
      });
      this.names = tempParametersnames;
    }
    if (parameters.lowKey !== undefined) {
      this.lowKey = parameters.lowKey;
    }
    if (parameters.highKey !== undefined) {
      this.highKey = parameters.highKey;
    }
  }    
}


/**
 * Validate the payload against the ServiceGroupDescriptionPartitionDescription schema
 *
 * @param {JSON} payload
 *
 */
ServiceGroupDescriptionPartitionDescription.prototype.serialize = function () {
  var payload = {};
  if (this['partitionScheme'] !== null && this['partitionScheme'] !== undefined) {
    if (typeof this['partitionScheme'] !== 'number') {
      throw new Error('this[\'partitionScheme\'] must be of type number.');
    }
    payload['PartitionScheme'] = this['partitionScheme'];
  }

  if (this['count'] !== null && this['count'] !== undefined) {
    if (typeof this['count'] !== 'number') {
      throw new Error('this[\'count\'] must be of type number.');
    }
    payload['Count'] = this['count'];
  }

  if (util.isArray(this['names'])) {
    payload['Names'] = [];
    for (var i = 0; i < this['names'].length; i++) {
      if (this['names'][i] !== null && this['names'][i] !== undefined) {
        if (typeof this['names'][i].valueOf() !== 'string') {
          throw new Error('this[\'names\'][i] must be of type string.');
        }
        payload['Names'][i] = this['names'][i];
      }
    }
  }

  if (this['lowKey'] !== null && this['lowKey'] !== undefined) {
    if (typeof this['lowKey'].valueOf() !== 'string') {
      throw new Error('this[\'lowKey\'] must be of type string.');
    }
    payload['LowKey'] = this['lowKey'];
  }

  if (this['highKey'] !== null && this['highKey'] !== undefined) {
    if (typeof this['highKey'].valueOf() !== 'string') {
      throw new Error('this[\'highKey\'] must be of type string.');
    }
    payload['HighKey'] = this['highKey'];
  }

  return payload;
};

/**
 * Deserialize the instance to ServiceGroupDescriptionPartitionDescription schema
 *
 * @param {JSON} instance
 *
 */
ServiceGroupDescriptionPartitionDescription.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['PartitionScheme'] !== undefined) {
      this['partitionScheme'] = instance['PartitionScheme'];
    }

    if (instance['Count'] !== undefined) {
      this['count'] = instance['Count'];
    }

    if (instance['Names']) {
      var tempInstanceNames = [];
      instance['Names'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstanceNames.push(element1);
      });
      this['names'] = tempInstanceNames;
    }

    if (instance['LowKey'] !== undefined) {
      this['lowKey'] = instance['LowKey'];
    }

    if (instance['HighKey'] !== undefined) {
      this['highKey'] = instance['HighKey'];
    }
  }

  return this;
};

module.exports = ServiceGroupDescriptionPartitionDescription;

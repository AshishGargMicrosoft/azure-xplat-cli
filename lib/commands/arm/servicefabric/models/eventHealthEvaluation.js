/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the EventHealthEvaluation class.
 * @constructor
 * @member {object} [unhealthyEvent]
 * 
 * @member {string} [unhealthyEvent.sourceId]
 * 
 * @member {string} [unhealthyEvent.property]
 * 
 * @member {number} [unhealthyEvent.healthState]
 * 
 * @member {string} [unhealthyEvent.timeToLiveInMilliSeconds]
 * 
 * @member {string} [unhealthyEvent.description]
 * 
 * @member {string} [unhealthyEvent.sequenceNumber]
 * 
 * @member {boolean} [unhealthyEvent.removeWhenExpired]
 * 
 * @member {string} [unhealthyEvent.sourceUtcTimestamp]
 * 
 * @member {string} [unhealthyEvent.lastModifiedUtcTimestamp]
 * 
 * @member {boolean} [unhealthyEvent.isExpired]
 * 
 * @member {string} [unhealthyEvent.lastOkTransitionAt]
 * 
 * @member {string} [unhealthyEvent.lastWarningTransitionAt]
 * 
 * @member {string} [unhealthyEvent.lastErrorTransitionAt]
 * 
 * @member {boolean} [considerWarningAsError]
 * 
 */
function EventHealthEvaluation(parameters) {
  EventHealthEvaluation['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.unhealthyEvent) {
      this.unhealthyEvent = new models['HealthEvent'](parameters.unhealthyEvent);
    }
    if (parameters.considerWarningAsError !== undefined) {
      this.considerWarningAsError = parameters.considerWarningAsError;
    }
  }    
}

util.inherits(EventHealthEvaluation, models['HealthEvaluation']);

/**
 * Validate the payload against the EventHealthEvaluation schema
 *
 * @param {JSON} payload
 *
 */
EventHealthEvaluation.prototype.serialize = function () {
  var payload = EventHealthEvaluation['super_'].prototype.serialize.call(this);
  if (this['unhealthyEvent']) {
    payload['UnhealthyEvent'] = this['unhealthyEvent'].serialize();
  }

  if (this['considerWarningAsError'] !== null && this['considerWarningAsError'] !== undefined) {
    if (typeof this['considerWarningAsError'] !== 'boolean') {
      throw new Error('this[\'considerWarningAsError\'] must be of type boolean.');
    }
    payload['ConsiderWarningAsError'] = this['considerWarningAsError'];
  }

  return payload;
};

/**
 * Deserialize the instance to EventHealthEvaluation schema
 *
 * @param {JSON} instance
 *
 */
EventHealthEvaluation.prototype.deserialize = function (instance) {
  EventHealthEvaluation['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['UnhealthyEvent']) {
      this['unhealthyEvent'] = new models['HealthEvent']().deserialize(instance['UnhealthyEvent']);
    }

    if (instance['ConsiderWarningAsError'] !== undefined) {
      this['considerWarningAsError'] = instance['ConsiderWarningAsError'];
    }
  }

  return this;
};

module.exports = EventHealthEvaluation;

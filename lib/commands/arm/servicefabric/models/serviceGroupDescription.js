/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ServiceGroupDescription class.
 * @constructor
 * @member {string} [applicationName]
 * 
 * @member {string} [serviceName]
 * 
 * @member {string} [serviceTypeName]
 * 
 * @member {object} [partitionDescription]
 * 
 * @member {number} [partitionDescription.partitionScheme]
 * 
 * @member {number} [partitionDescription.count]
 * 
 * @member {array} [partitionDescription.names]
 * 
 * @member {string} [partitionDescription.lowKey]
 * 
 * @member {string} [partitionDescription.highKey]
 * 
 * @member {string} [placementConstraints]
 * 
 * @member {number} [flags]
 * 
 * @member {array} [serviceGroupMemberDescription]
 * 
 * @member {string} ServiceKind Polymorhpic Discriminator
 * 
 */
function ServiceGroupDescription(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.applicationName !== undefined) {
      this.applicationName = parameters.applicationName;
    }
    if (parameters.serviceName !== undefined) {
      this.serviceName = parameters.serviceName;
    }
    if (parameters.serviceTypeName !== undefined) {
      this.serviceTypeName = parameters.serviceTypeName;
    }
    if (parameters.partitionDescription) {
      this.partitionDescription = new models['ServiceGroupDescriptionPartitionDescription'](parameters.partitionDescription);
    }
    if (parameters.placementConstraints !== undefined) {
      this.placementConstraints = parameters.placementConstraints;
    }
    if (parameters.flags !== undefined) {
      this.flags = parameters.flags;
    }
    if (parameters.serviceGroupMemberDescription) {
      var tempParametersserviceGroupMemberDescription = [];
      parameters.serviceGroupMemberDescription.forEach(function(element) {
        if (element) {
          element = new models['ServiceGroupMemberDescription'](element);
        }
        tempParametersserviceGroupMemberDescription.push(element);
      });
      this.serviceGroupMemberDescription = tempParametersserviceGroupMemberDescription;
    }
    if (parameters.ServiceKind !== undefined) {
      this.ServiceKind = parameters.ServiceKind;
    }
  }    
}


/**
 * Validate the payload against the ServiceGroupDescription schema
 *
 * @param {JSON} payload
 *
 */
ServiceGroupDescription.prototype.serialize = function () {
  var payload = {};
  if (this['applicationName'] !== null && this['applicationName'] !== undefined) {
    if (typeof this['applicationName'].valueOf() !== 'string') {
      throw new Error('this[\'applicationName\'] must be of type string.');
    }
    payload['ApplicationName'] = this['applicationName'];
  }

  if (this['serviceName'] !== null && this['serviceName'] !== undefined) {
    if (typeof this['serviceName'].valueOf() !== 'string') {
      throw new Error('this[\'serviceName\'] must be of type string.');
    }
    payload['ServiceName'] = this['serviceName'];
  }

  if (this['serviceTypeName'] !== null && this['serviceTypeName'] !== undefined) {
    if (typeof this['serviceTypeName'].valueOf() !== 'string') {
      throw new Error('this[\'serviceTypeName\'] must be of type string.');
    }
    payload['ServiceTypeName'] = this['serviceTypeName'];
  }

  if (this['partitionDescription']) {
    payload['PartitionDescription'] = this['partitionDescription'].serialize();
  }

  if (this['placementConstraints'] !== null && this['placementConstraints'] !== undefined) {
    if (typeof this['placementConstraints'].valueOf() !== 'string') {
      throw new Error('this[\'placementConstraints\'] must be of type string.');
    }
    payload['PlacementConstraints'] = this['placementConstraints'];
  }

  if (this['flags'] !== null && this['flags'] !== undefined) {
    if (typeof this['flags'] !== 'number') {
      throw new Error('this[\'flags\'] must be of type number.');
    }
    payload['Flags'] = this['flags'];
  }

  if (util.isArray(this['serviceGroupMemberDescription'])) {
    payload['ServiceGroupMemberDescription'] = [];
    for (var i = 0; i < this['serviceGroupMemberDescription'].length; i++) {
      if (this['serviceGroupMemberDescription'][i]) {
        payload['ServiceGroupMemberDescription'][i] = this['serviceGroupMemberDescription'][i].serialize();
      }
    }
  }

  if (this['ServiceKind'] === null || this['ServiceKind'] === undefined || typeof this['ServiceKind'].valueOf() !== 'string') {
    throw new Error('this[\'ServiceKind\'] cannot be null or undefined and it must be of type string.');
  }
  payload['ServiceKind'] = this['ServiceKind'];

  return payload;
};

/**
 * Deserialize the instance to ServiceGroupDescription schema
 *
 * @param {JSON} instance
 *
 */
ServiceGroupDescription.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['ApplicationName'] !== undefined) {
      this['applicationName'] = instance['ApplicationName'];
    }

    if (instance['ServiceName'] !== undefined) {
      this['serviceName'] = instance['ServiceName'];
    }

    if (instance['ServiceTypeName'] !== undefined) {
      this['serviceTypeName'] = instance['ServiceTypeName'];
    }

    if (instance['PartitionDescription']) {
      this['partitionDescription'] = new models['ServiceGroupDescriptionPartitionDescription']().deserialize(instance['PartitionDescription']);
    }

    if (instance['PlacementConstraints'] !== undefined) {
      this['placementConstraints'] = instance['PlacementConstraints'];
    }

    if (instance['Flags'] !== undefined) {
      this['flags'] = instance['Flags'];
    }

    if (instance['ServiceGroupMemberDescription']) {
      var tempInstanceServiceGroupMemberDescription = [];
      instance['ServiceGroupMemberDescription'].forEach(function(element1) {
        if (element1) {
          element1 = new models['ServiceGroupMemberDescription']().deserialize(element1);
        }
        tempInstanceServiceGroupMemberDescription.push(element1);
      });
      this['serviceGroupMemberDescription'] = tempInstanceServiceGroupMemberDescription;
    }

    if (instance['ServiceKind'] !== undefined) {
      this['ServiceKind'] = instance['ServiceKind'];
    }
  }

  return this;
};

module.exports = ServiceGroupDescription;

/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ReplicaHealth class.
 * @constructor
 * @member {number} [serviceKind]
 * 
 * @member {string} [partitionId]
 * 
 * @member {string} [replicaId]
 * 
 * @member {array} [healthEvents]
 * 
 * @member {number} [aggregatedHealthState]
 * 
 */
function ReplicaHealth(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.serviceKind !== undefined) {
      this.serviceKind = parameters.serviceKind;
    }
    if (parameters.partitionId !== undefined) {
      this.partitionId = parameters.partitionId;
    }
    if (parameters.replicaId !== undefined) {
      this.replicaId = parameters.replicaId;
    }
    if (parameters.healthEvents) {
      var tempParametershealthEvents = [];
      parameters.healthEvents.forEach(function(element) {
        if (element) {
          element = new models['HealthEvent'](element);
        }
        tempParametershealthEvents.push(element);
      });
      this.healthEvents = tempParametershealthEvents;
    }
    if (parameters.aggregatedHealthState !== undefined) {
      this.aggregatedHealthState = parameters.aggregatedHealthState;
    }
  }    
}


/**
 * Validate the payload against the ReplicaHealth schema
 *
 * @param {JSON} payload
 *
 */
ReplicaHealth.prototype.serialize = function () {
  var payload = {};
  if (this['serviceKind'] !== null && this['serviceKind'] !== undefined) {
    if (typeof this['serviceKind'] !== 'number') {
      throw new Error('this[\'serviceKind\'] must be of type number.');
    }
    payload['ServiceKind'] = this['serviceKind'];
  }

  if (this['partitionId'] !== null && this['partitionId'] !== undefined) {
    if (typeof this['partitionId'].valueOf() !== 'string') {
      throw new Error('this[\'partitionId\'] must be of type string.');
    }
    payload['PartitionId'] = this['partitionId'];
  }

  if (this['replicaId'] !== null && this['replicaId'] !== undefined) {
    if (typeof this['replicaId'].valueOf() !== 'string') {
      throw new Error('this[\'replicaId\'] must be of type string.');
    }
    payload['ReplicaId'] = this['replicaId'];
  }

  if (util.isArray(this['healthEvents'])) {
    payload['HealthEvents'] = [];
    for (var i = 0; i < this['healthEvents'].length; i++) {
      if (this['healthEvents'][i]) {
        payload['HealthEvents'][i] = this['healthEvents'][i].serialize();
      }
    }
  }

  if (this['aggregatedHealthState'] !== null && this['aggregatedHealthState'] !== undefined) {
    if (typeof this['aggregatedHealthState'] !== 'number') {
      throw new Error('this[\'aggregatedHealthState\'] must be of type number.');
    }
    payload['AggregatedHealthState'] = this['aggregatedHealthState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ReplicaHealth schema
 *
 * @param {JSON} instance
 *
 */
ReplicaHealth.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['ServiceKind'] !== undefined) {
      this['serviceKind'] = instance['ServiceKind'];
    }

    if (instance['PartitionId'] !== undefined) {
      this['partitionId'] = instance['PartitionId'];
    }

    if (instance['ReplicaId'] !== undefined) {
      this['replicaId'] = instance['ReplicaId'];
    }

    if (instance['HealthEvents']) {
      var tempInstanceHealthEvents = [];
      instance['HealthEvents'].forEach(function(element1) {
        if (element1) {
          element1 = new models['HealthEvent']().deserialize(element1);
        }
        tempInstanceHealthEvents.push(element1);
      });
      this['healthEvents'] = tempInstanceHealthEvents;
    }

    if (instance['AggregatedHealthState'] !== undefined) {
      this['aggregatedHealthState'] = instance['AggregatedHealthState'];
    }
  }

  return this;
};

module.exports = ReplicaHealth;

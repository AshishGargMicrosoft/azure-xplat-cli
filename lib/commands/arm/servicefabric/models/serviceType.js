/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the ServiceType class.
 * @constructor
 * @member {object} [serviceTypeDescription]
 * 
 * @member {boolean} [serviceTypeDescription.isStateful]
 * 
 * @member {string} [serviceTypeDescription.serviceTypeName]
 * 
 * @member {string} [serviceTypeDescription.placementConstraints]
 * 
 * @member {boolean} [serviceTypeDescription.hasPersistedState]
 * 
 * @member {string} [serviceManifestVersion]
 * 
 * @member {string} [serviceManifestName]
 * 
 * @member {boolean} [isServiceGroup]
 * 
 */
function ServiceType(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.serviceTypeDescription) {
      this.serviceTypeDescription = new models['ServiceTypeServiceTypeDescription'](parameters.serviceTypeDescription);
    }
    if (parameters.serviceManifestVersion !== undefined) {
      this.serviceManifestVersion = parameters.serviceManifestVersion;
    }
    if (parameters.serviceManifestName !== undefined) {
      this.serviceManifestName = parameters.serviceManifestName;
    }
    if (parameters.isServiceGroup !== undefined) {
      this.isServiceGroup = parameters.isServiceGroup;
    }
  }    
}


/**
 * Validate the payload against the ServiceType schema
 *
 * @param {JSON} payload
 *
 */
ServiceType.prototype.serialize = function () {
  var payload = {};
  if (this['serviceTypeDescription']) {
    payload['ServiceTypeDescription'] = this['serviceTypeDescription'].serialize();
  }

  if (this['serviceManifestVersion'] !== null && this['serviceManifestVersion'] !== undefined) {
    if (typeof this['serviceManifestVersion'].valueOf() !== 'string') {
      throw new Error('this[\'serviceManifestVersion\'] must be of type string.');
    }
    payload['ServiceManifestVersion'] = this['serviceManifestVersion'];
  }

  if (this['serviceManifestName'] !== null && this['serviceManifestName'] !== undefined) {
    if (typeof this['serviceManifestName'].valueOf() !== 'string') {
      throw new Error('this[\'serviceManifestName\'] must be of type string.');
    }
    payload['ServiceManifestName'] = this['serviceManifestName'];
  }

  if (this['isServiceGroup'] !== null && this['isServiceGroup'] !== undefined) {
    if (typeof this['isServiceGroup'] !== 'boolean') {
      throw new Error('this[\'isServiceGroup\'] must be of type boolean.');
    }
    payload['IsServiceGroup'] = this['isServiceGroup'];
  }

  return payload;
};

/**
 * Deserialize the instance to ServiceType schema
 *
 * @param {JSON} instance
 *
 */
ServiceType.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['ServiceTypeDescription']) {
      this['serviceTypeDescription'] = new models['ServiceTypeServiceTypeDescription']().deserialize(instance['ServiceTypeDescription']);
    }

    if (instance['ServiceManifestVersion'] !== undefined) {
      this['serviceManifestVersion'] = instance['ServiceManifestVersion'];
    }

    if (instance['ServiceManifestName'] !== undefined) {
      this['serviceManifestName'] = instance['ServiceManifestName'];
    }

    if (instance['IsServiceGroup'] !== undefined) {
      this['isServiceGroup'] = instance['IsServiceGroup'];
    }
  }

  return this;
};

module.exports = ServiceType;

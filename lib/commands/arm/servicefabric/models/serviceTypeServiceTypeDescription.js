/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the ServiceTypeServiceTypeDescription class.
 * @constructor
 * @member {boolean} [isStateful]
 * 
 * @member {string} [serviceTypeName]
 * 
 * @member {string} [placementConstraints]
 * 
 * @member {boolean} [hasPersistedState]
 * 
 */
function ServiceTypeServiceTypeDescription(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.isStateful !== undefined) {
      this.isStateful = parameters.isStateful;
    }
    if (parameters.serviceTypeName !== undefined) {
      this.serviceTypeName = parameters.serviceTypeName;
    }
    if (parameters.placementConstraints !== undefined) {
      this.placementConstraints = parameters.placementConstraints;
    }
    if (parameters.hasPersistedState !== undefined) {
      this.hasPersistedState = parameters.hasPersistedState;
    }
  }    
}


/**
 * Validate the payload against the ServiceTypeServiceTypeDescription schema
 *
 * @param {JSON} payload
 *
 */
ServiceTypeServiceTypeDescription.prototype.serialize = function () {
  var payload = {};
  if (this['isStateful'] !== null && this['isStateful'] !== undefined) {
    if (typeof this['isStateful'] !== 'boolean') {
      throw new Error('this[\'isStateful\'] must be of type boolean.');
    }
    payload['IsStateful'] = this['isStateful'];
  }

  if (this['serviceTypeName'] !== null && this['serviceTypeName'] !== undefined) {
    if (typeof this['serviceTypeName'].valueOf() !== 'string') {
      throw new Error('this[\'serviceTypeName\'] must be of type string.');
    }
    payload['ServiceTypeName'] = this['serviceTypeName'];
  }

  if (this['placementConstraints'] !== null && this['placementConstraints'] !== undefined) {
    if (typeof this['placementConstraints'].valueOf() !== 'string') {
      throw new Error('this[\'placementConstraints\'] must be of type string.');
    }
    payload['PlacementConstraints'] = this['placementConstraints'];
  }

  if (this['hasPersistedState'] !== null && this['hasPersistedState'] !== undefined) {
    if (typeof this['hasPersistedState'] !== 'boolean') {
      throw new Error('this[\'hasPersistedState\'] must be of type boolean.');
    }
    payload['HasPersistedState'] = this['hasPersistedState'];
  }

  return payload;
};

/**
 * Deserialize the instance to ServiceTypeServiceTypeDescription schema
 *
 * @param {JSON} instance
 *
 */
ServiceTypeServiceTypeDescription.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['IsStateful'] !== undefined) {
      this['isStateful'] = instance['IsStateful'];
    }

    if (instance['ServiceTypeName'] !== undefined) {
      this['serviceTypeName'] = instance['ServiceTypeName'];
    }

    if (instance['PlacementConstraints'] !== undefined) {
      this['placementConstraints'] = instance['PlacementConstraints'];
    }

    if (instance['HasPersistedState'] !== undefined) {
      this['hasPersistedState'] = instance['HasPersistedState'];
    }
  }

  return this;
};

module.exports = ServiceTypeServiceTypeDescription;
